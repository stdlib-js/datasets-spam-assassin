{"id":"01360","group":"easy-ham-2","checksum":{"type":"MD5","value":"12e20ec23520b1c5515424bf77ed94c8"},"text":"From vulnwatch-return-430-jm=jmason.org@vulnwatch.org  Fri Aug  9 15:34:13 2002\nReturn-Path: <vulnwatch-return-430-yyyy=spamassassin.taint.org@vulnwatch.org>\nDelivered-To: yyyy@localhost.netnoteinc.com\nReceived: from localhost (localhost [127.0.0.1])\n\tby phobos.labs.netnoteinc.com (Postfix) with ESMTP id EFBEF440DC\n\tfor <jm@localhost>; Fri,  9 Aug 2002 10:33:34 -0400 (EDT)\nReceived: from phobos [127.0.0.1]\n\tby localhost with IMAP (fetchmail-5.9.0)\n\tfor jm@localhost (single-drop); Fri, 09 Aug 2002 15:33:35 +0100 (IST)\nReceived: from webnote.net (mail.webnote.net [193.120.211.219]) by\n    dogma.slashnull.org (8.11.6/8.11.6) with ESMTP id g79EPOb06890 for\n    <jm@jmason.org>; Fri, 9 Aug 2002 15:25:29 +0100\nReceived: from vikki.vulnwatch.org ([199.233.98.101]) by webnote.net\n    (8.9.3/8.9.3) with SMTP id DAA02996 for <jm@jmason.org>; Fri,\n    9 Aug 2002 03:31:50 +0100\nReceived: (qmail 254 invoked by alias); 9 Aug 2002 01:34:23 -0000\nMailing-List: contact vulnwatch-help@vulnwatch.org; run by ezmlm\nPrecedence: bulk\nList-Post: <mailto:vulnwatch@vulnwatch.org>\nList-Help: <mailto:vulnwatch-help@vulnwatch.org>\nList-Unsubscribe: <mailto:vulnwatch-unsubscribe@vulnwatch.org>\nList-Subscribe: <mailto:vulnwatch-subscribe@vulnwatch.org>\nDelivered-To: mailing list vulnwatch@vulnwatch.org\nDelivered-To: moderator for vulnwatch@vulnwatch.org\nReceived: (qmail 23589 invoked from network); 9 Aug 2002 01:12:03 -0000\nFrom: \"Marc Maiffret\" <marc@eeye.com>\nTo: \"vulwatch\" <vulnwatch@vulnwatch.org>\nDate: Thu, 8 Aug 2002 17:26:22 -0700\nMessage-Id: <MKEAIJIPCGAHEFEJGDOCOEMHGEAA.marc@eeye.com>\nMIME-Version: 1.0\nContent-Type: text/plain; charset=\"iso-8859-1\"\nContent-Transfer-Encoding: 7bit\nX-Priority: 3 (Normal)\nX-Msmail-Priority: Normal\nX-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2910.0)\nImportance: Normal\nX-Mimeole: Produced By Microsoft MimeOLE V6.00.2600.0000\nSubject: [VulnWatch] EEYE: Macromedia Shockwave Flash Malformed Header Overflow\n\nMacromedia Shockwave Flash Malformed Header Overflow\n\nRelease Date: August 8, 2002\n\nSeverity:\nHigh (Remote Code Execution)\n\nSystems Affected:\nMacromedia Shockwave Flash - All Versions;\nUnix and Windows; Netscape and Internet Explorer\n\nDescription:\nWhile working on some pre-release eEye Retina CHAM tools, an exploitable\ncondition was discovered within the Shockwave Flash file format called SWF\n(pronounced \"SWIF\").\n\nSince this is a browser based bug, it makes it trivial to bypass firewalls\nand attack the user at his desktop. Also, application browser bugs allow you\nto target users based on the websites they visit, the newsgroups they read,\nor the mailing lists they frequent. It is a \"one button\" push attack, and\nusing anonymous remailers or proxies for these attacks is possible.\n\nThis vulnerability has been proven to work with all versions of Macromedia\nFlash on Windows and Unix, through IE and Netscape. It may be run wherever\nShockwave files may be displayed or attached, including: websites, email,\nnews postings, forums, Instant Messengers, and within applications utilizing\nweb-browsing functionality.\n\nTechnical Description:\nThe data header is roughly made out to:\n\n[Flash signature][version (1)][File Length(A number of bytes too\nshort)][frame size (malformed)][Frame Rate (malformed)][Frame Count\n(malformed)][Data]\n\nBy creating a malformed header we can supply more frame data than the\ndecoder is expecting. By supplying enough data we can overwrite a function\npointer address and redirect the flow of control to a specified location as\nsoon as this address is used. At the moment the overwritten address takes\ncontrol flow, an address pointing to a portion of our data is 8 bytes back\nfrom the stack pointer. By using a relative jump we redirect flow into a\n\"call dword ptr [esp+N]\", where N is the number of bytes from the stack\npointer. These \"jump points\" can be located in multiple loaded dll's. By\ncreating a simple tool using the debugging API and ReadMemory, you can\nexamine a process's virtual address space for useful data to help you with\nyour exploitation.\n\nThis is not to say other potentially vulnerable situations have not been\nfound in Macromedia's Flash. We discovered about seventeen others before we\nended our testing. We are working with Macromedia on these issues.\n\nProtection:\nRetina(R) Network Security Scanner already scans for this latest version of\nFlash on users' systems. Ensure all users within your control upgrade their\nsystems.\n\nVendor Status:\nMacromedia has released a patch for this vulnerability, available at:\nhttp://www.macromedia.com/v1/handlers/index.cfm?ID=23293&Method=Full&Title=M\nPSB02%2D09%20%2D%20Macromedia%20Flash%20Malformed%20Header%20Vulnerability%2\n0Issue&Cache=False\n\nDiscovery: Drew Copley\nExploitation: Riley Hassell\n\nGreetings: Hacktivismo!, Centra Spike\n\nCopyright (c) 1998-2002 eEye Digital Security\nPermission is hereby granted for the redistribution of this alert\nelectronically. It is not to be edited in any way without express consent of\neEye. If you wish to reprint the whole or any part of this alert in any\nother medium excluding electronic medium, please e-mail alert@eEye.com for\npermission.\n\nDisclaimer\nThe information within this paper may change without notice. Use of this\ninformation constitutes acceptance for use in an AS IS condition. There are\nNO warranties with regard to this information. In no event shall the author\nbe liable for any damages whatsoever arising out of or in connection with\nthe use or spread of this information. Any use of this information is at the\nuser's own risk.\n\nFeedback\nPlease send suggestions, updates, and comments to:\n\neEye Digital Security\nhttp://www.eEye.com\ninfo@eEye.com\n\n\n"}