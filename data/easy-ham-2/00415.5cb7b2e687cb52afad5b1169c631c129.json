{"id":"00415","group":"easy-ham-2","checksum":{"type":"MD5","value":"5cb7b2e687cb52afad5b1169c631c129"},"text":"Return-Path: ilug-admin@linux.ie\nDelivery-Date: Sat Jul 27 18:02:50 2002\nReturn-Path: <ilug-admin@linux.ie>\nReceived: from lugh.tuatha.org (root@lugh.tuatha.org [194.125.145.45])\n\tby dogma.slashnull.org (8.11.6/8.11.6) with ESMTP id g6RH2oi11099\n\tfor <jm-ilug@jmason.org>; Sat, 27 Jul 2002 18:02:50 +0100\nReceived: from lugh (root@localhost [127.0.0.1])\n\tby lugh.tuatha.org (8.9.3/8.9.3) with ESMTP id SAA23208;\n\tSat, 27 Jul 2002 18:01:19 +0100\nX-Authentication-Warning: lugh.tuatha.org: Host root@localhost [127.0.0.1] claimed to be lugh\nReceived: from mail02.svc.cra.dublin.eircom.net (mail02.svc.cra.dublin.eircom.net [159.134.118.18])\n\tby lugh.tuatha.org (8.9.3/8.9.3) with SMTP id SAA23172\n\tfor <ilug@linux.ie>; Sat, 27 Jul 2002 18:01:12 +0100\nMessage-Id: <200207271701.SAA23172@lugh.tuatha.org>\nReceived: (qmail 6320 messnum 30063 invoked from network[159.134.159.50/p306.as1.drogheda1.eircom.net]); 27 Jul 2002 17:00:40 -0000\nReceived: from p306.as1.drogheda1.eircom.net (HELO there) (159.134.159.50)\n  by mail02.svc.cra.dublin.eircom.net (qp 6320) with SMTP; 27 Jul 2002 17:00:40 -0000\nContent-Type: text/plain;\n  charset=\"iso-8859-1\"\nFrom: John Gay <johngay@eircom.net>\nTo: kevin lyda <kevin+dated+1028163438.f677b3@linux.ie>\nSubject: Re: [ILUG] Optimizing for Pentium Pt.2\nDate: Sat, 27 Jul 2002 17:58:12 +0100\nX-Mailer: KMail [version 1.3.2]\nReferences: <200207262228.XAA19581@lugh.tuatha.org> <20020727015716.A6561@ie.suberic.net>\nIn-Reply-To: <20020727015716.A6561@ie.suberic.net>\nCc: ilug@linux.ie\nMIME-Version: 1.0\nContent-Transfer-Encoding: 8bit\nSender: ilug-admin@linux.ie\nErrors-To: ilug-admin@linux.ie\nX-Mailman-Version: 1.1\nPrecedence: bulk\nList-Id: Irish Linux Users' Group <ilug.linux.ie>\nX-BeenThere: ilug@linux.ie\n\nOn Sat 27 Jul 2002 01:57, you wrote:\n> On Fri, Jul 26, 2002 at 11:24:30PM +0100, John Gay wrote:\n> > A while ago I asked what other packages I should optomize for Pentium.\n> > One person answered GlibC. This got me thinking about GCC itself, so I\n> > asked on another list and got a few answers, most were \"don't even think\n> > about it\" but a few suggested GCC and one pointed me to Linux From\n> > Scratch.\n>\n> why?\n>\n> or more specifically, what do you mean?  on one hand you can optimise\n> how gcc is compiled.  all that will do is make it generate the exact\n> same code just a smidge faster.  and since gcc is such a memory pig,\n> you'd do better to buy more ram to up your fs cache hits and to keep\n> gcc's heap out of swap.\n>\nTo explain what I mean:\nAccording to the PGCC site, GCC by itself is not very good at taking \nadvantage of the pipelining features introduced with the Pentium family. The \nPGCC patches are supposed to make GCC generate tighter code, but your point \nabout compiler bugs is well taken. This is why I am taking things slow and \nlooking into these things. As Isaid, the PGCC site does not seem to have been \nupdated in at least a year or more?!? I am also looking into GCC itself. Now \nthat the 3.1. series is out, it might be better than when the PGCC patches \nwere written. The bottom line is, Pentiums have better instruction sets than \nthe original 386 instructions that they still support. The Pentium also \nstarted introducing pipelining so properly generated code can be upto 30% \nfaster than equivulent code that performs the same function! As for why \noptimise GCC if it will only produce that same code only slightly faster? The \nspeed is based on a percentage of the total compile time. The first time I \ncompiled the qt libs, with only 16M and a LOT of swap, it took over 48 hours. \nI've now got 128M in the box but at 200Mhz any increase, distributed over \nsuch a long compile is still considerable.\n\n> on the other side you can look into patches to gcc that affect it's\n> code generation.  um, ok, but keep in mind that compiler errors suck.\n> i can't express that enough.  compilers should just work.  perfectly.\n> always.  doing anything that might affect that is, in my opinion, insane.\n> they're hard to trace and you'd better have a deep knowledge of what's\n> going on to either report bugs to the patch developers or to fix it\n> yourself.  plus my understanding is that gcc would need major changes\n> to get large speed boosts on x86 chips.\n>\nMy understanding, and I've followed the development of the Intel family since \nthe 8080, each generation since the 386 has introduced better and faster \ninstructions. I.E.:\nThe 486 introduced I.E.E.E floating point instructions by incorporating an \nFPU on board. The first few generations were flaky, so Intel disabled the \ndodgy ones and sold then as 486SX, I.E. without the FPU. Later generations \nwere better, this is why you only find slow 486SX's ;-) Therefore 486's, with \nworking FPU's can calculate floats faster than 386's, but you must generate \nthe proper codes to take advantage of this.\n\nThe Pentium's improved the FPU logic and introduced pipelining. The first \ngenerations of Pentiums had faulty FPu logic programmed into them, the \nPentium Bug, but subsequent ones were fine. These added instructions are \nfaster again then the 486 equivulents. Also, the pipelining needs careful \ninstruction ordering to take full advantage of it's speed improvements, \nagain, something the compiler must know about to utilise to full effect. \nAccording the the PGCC site GCC does this poorly, but that info seems to be \ndated, GCC3.1.x might be better. This is one of the areas I am researching \nclosely to get an answer.\n\nMMX added the ability to perform matrix calculations on int's with single \ninstructions and using special DMA features within the Pentium to speed this \nup. Two problems with this:\n1) int's are not very useful for most matrix calculations, floats would be \nbetters.\n2) this is not something that can be optimised well by a compiler. It need to \nbe identified and provided for in the sources.\nI.E. not much use to anyone, but makes great ad copy ;-)\n\nThe PentiumPro improved the pipeline enormously. Again, a properly written \ncompiler should be able to optimise for this, once it can organise the code \nproperly.\n\nThe PIII added MMX-type instructions for floats! Now this IS useful! \nGraphic-Intensive programs can take greate advantage of this, but it must be \nprovided for in the source code. Compilers can not, usually optimise for this \nsort of thing. XFree86 and DRI are two prime examples that do provide for \nthis, so the PIII can run XFree86 and DRI quite a bit faster, IF it's \ncompiled for these SSE instructions!\n\nNot sure what improvements the P4 introduce? I think it's mostly just speed \nimprovements rather than any execution changes.\n\nSo, The difference between the 386 and the PentiumMMX 'should' yield a \nsignificant speed boost if optimised correctly. There are faster floating \npoint instructions and pipelining that need optimising for. I'm not sure if \nGCC can optimise properly for the pipelining, at least the PGCC group found \nsignificant improvements to add to GCC2.95.3 to gain speed improvements of \nupto 30%. 30% of 48 hours is 14.4 hours. Of course none of this will have any \neffect on O/I bound processes but GUI's are mostly CPU bound. I am also \nfinding out about object pre-linking optimisations which should give even \nbetter performance for QT and KDE.\n\nNow if I had another PIII for my box, I could take advantage of those SSE \ninstructions to optimise XFree86 as well!\n\n> kevin\n\nAn, of course, I've loads of time on my hands now and I need something to \nkeep me busy. At least I can say that I've sucessfully built a full Linux \nsystem, including KDE3 from scratch when I'm done ;-)\nCheers,\n\n\tJohn Gay\n\n-- \nIrish Linux Users' Group: ilug@linux.ie\nhttp://www.linux.ie/mailman/listinfo/ilug for (un)subscription information.\nList maintainer: listmaster@linux.ie\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}