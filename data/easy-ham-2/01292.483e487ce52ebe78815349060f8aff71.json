{"id":"01292","group":"easy-ham-2","checksum":{"type":"MD5","value":"483e487ce52ebe78815349060f8aff71"},"text":"From vulnwatch-return-400-jm=jmason.org@vulnwatch.org  Mon Jul 22 19:26:06 2002\nReturn-Path: <vulnwatch-return-400-yyyy=spamassassin.taint.org@vulnwatch.org>\nDelivered-To: yyyy@localhost.netnoteinc.com\nReceived: from localhost (localhost [127.0.0.1])\n\tby phobos.labs.netnoteinc.com (Postfix) with ESMTP id 5AEA3440C8\n\tfor <jm@localhost>; Mon, 22 Jul 2002 14:26:03 -0400 (EDT)\nReceived: from dogma.slashnull.org [212.17.35.15]\n\tby localhost with IMAP (fetchmail-5.9.0)\n\tfor jm@localhost (single-drop); Mon, 22 Jul 2002 19:26:03 +0100 (IST)\nReceived: from webnote.net (mail.webnote.net [193.120.211.219]) by\n    dogma.slashnull.org (8.11.6/8.11.6) with ESMTP id g6MFHB902006 for\n    <jm@jmason.org>; Mon, 22 Jul 2002 16:17:11 +0100\nReceived: from vikki.vulnwatch.org ([199.233.98.101]) by webnote.net\n    (8.9.3/8.9.3) with SMTP id OAA32249 for <jm@jmason.org>; Mon,\n    22 Jul 2002 14:55:11 +0100\nReceived: (qmail 16454 invoked by alias); 22 Jul 2002 14:08:03 -0000\nMailing-List: contact vulnwatch-help@vulnwatch.org; run by ezmlm\nPrecedence: bulk\nList-Post: <mailto:vulnwatch@vulnwatch.org>\nList-Help: <mailto:vulnwatch-help@vulnwatch.org>\nList-Unsubscribe: <mailto:vulnwatch-unsubscribe@vulnwatch.org>\nList-Subscribe: <mailto:vulnwatch-subscribe@vulnwatch.org>\nDelivered-To: mailing list vulnwatch@vulnwatch.org\nDelivered-To: moderator for vulnwatch@vulnwatch.org\nReceived: (qmail 25523 invoked from network); 22 Jul 2002 12:02:43 -0000\nDate: Mon, 22 Jul 2002 13:21:28 +0200\nFrom: e-matters Security <security@e-matters.de>\nTo: bugtraq@securityfocus.com\nCc: vulnwatch@vulnwatch.org\nMessage-Id: <20020722112128.GB9191@php.net>\nReply-To: security@e-matters.de\nMIME-Version: 1.0\nContent-Type: text/plain; charset=us-ascii\nContent-Disposition: inline\nUser-Agent: Mutt/1.4i\nSubject: [VulnWatch] Advisory 02/2002: PHP remote vulnerability\n\n                           e-matters GmbH\n                          www.e-matters.de\n\n                      -= Security  Advisory =-\n\n\n\n     Advisory: Remote Compromise/DOS Vulnerability in PHP\n Release Date: 2002/07/22\nLast Modified: 2002/07/22\n       Author: Stefan Esser [s.esser@e-matters.de]\n\n  Application: PHP 4.2.0, 4.2.1\n     Severity: A vulnerability within the multipart/form-data handler\n               could allow remote compromise of the web server.\n         Risk: Critical\nVendor Status: Patches Released.\n    Reference: http://security.e-matters.de/advisories/022002.html\n\n\n\nOverview:\n\t\n   We have discovered a serious vulnerability within the default version \n   of PHP. Depending on the processor architecture it may be possible for a \n   remote attacker to either crash or compromise the web server. \n \n\t\nDetails:\n\n   PHP 4.2.0 introduced a completely rewritten multipart/form-data POST \n   handler. While I was working on the code in my role as PHP developer\n   i found a bug within the way the mime headers are processed. \n   A malformed POST request can trigger an error condition, that is not\n   correctly handled. Due to this bug it could happen that an uninit-\n   ialised struct gets appended to the linked list of mime headers.\n   When the lists gets cleaned or destroyed PHP tries to free the pointers\n   that are expected in the struct. Because of the lack of initialisation\n   those pointers contain stuff that was left on the stack by previous\n   function calls. \n\n   On the IA32 architecture (aka. x86) it is not possible to control what\n   will end up in the uninitialised struct because of the stack layout. All \n   possible code paths leave illegal addresses within the struct and PHP\n   will crash when it tries to free them.\n\n   Unfortunately the situation is absolutely different if you look on a\n   solaris sparc installation. Here it is possible for an attacker to free\n   chunks of memory that are full under his control. This is most probably\n   the case for several more non IA32 architectures.\n\n   Please note that exploitability is not only limited to systems that are\n   running malloc()/free() implementations that are known to be vulnerable\n   to control structure overwrites. This is because the internal PHP memory\n   managment implements its own linked list system that can be used to\n   overwrite nearly arbitrary memory addresses.\n   \n\nProof of Concept:\n\n   e-matters is not going to release the exploit for this vulnerability to\n   the public.\n   \n\nVendor Response:\n\n   22th July 2002 - An updated version of PHP which fixes this \n                    vulnerability was released and can be downloaded at:\n\n                       http://www.php.net/downloads.php\n\n                    The vendor announcement is available at:\n\n                       http://www.php.net/release_4_2_2.php\n\n\nRecommendation:\n\n   If you are running PHP 4.2.x you should upgrade as soon as possible,\n   especially if your server runs on a non IA32 CPU. If you cannot upgrade\n   for whatever reason the only way to workaround this, is to disable all\n   kinds of POST requests on your server.  \n   \n   \nGPG-Key:\n\n   http://security.e-matters.de/gpg_key.asc\n    \n   pub  1024D/75E7AAD6 2002-02-26 e-matters GmbH - Securityteam\n   Key fingerprint = 43DD 843C FAB9 832A E5AB  CAEB 81F2 8110 75E7 AAD6\n\n\nCopyright 2002 Stefan Esser. All rights reserved.\n\n\n\n\n"}