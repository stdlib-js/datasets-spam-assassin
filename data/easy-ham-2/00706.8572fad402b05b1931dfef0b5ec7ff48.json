{"id":"00706","group":"easy-ham-2","checksum":{"type":"MD5","value":"8572fad402b05b1931dfef0b5ec7ff48"},"text":"From exmh-workers-admin@redhat.com  Wed Jul 24 10:41:51 2002\nReturn-Path: <exmh-workers-admin@spamassassin.taint.org>\nDelivered-To: yyyy@localhost.netnoteinc.com\nReceived: from localhost (localhost [127.0.0.1])\n\tby phobos.labs.netnoteinc.com (Postfix) with ESMTP id 1E301440CC\n\tfor <jm@localhost>; Wed, 24 Jul 2002 05:41:46 -0400 (EDT)\nReceived: from dogma.slashnull.org [212.17.35.15]\n\tby localhost with IMAP (fetchmail-5.9.0)\n\tfor jm@localhost (single-drop); Wed, 24 Jul 2002 10:41:46 +0100 (IST)\nReceived: from listman.spamassassin.taint.org (listman.spamassassin.taint.org [66.187.233.211]) by\n    dogma.slashnull.org (8.11.6/8.11.6) with ESMTP id g6O9at401239 for\n    <jm-exmh@jmason.org>; Wed, 24 Jul 2002 10:36:55 +0100\nReceived: from listman.spamassassin.taint.org (localhost.localdomain [127.0.0.1]) by\n    listman.redhat.com (Postfix) with ESMTP id 2D8D83F2DD; Wed, 24 Jul 2002\n    05:36:03 -0400 (EDT)\nDelivered-To: exmh-workers@listman.spamassassin.taint.org\nReceived: from int-mx1.corp.spamassassin.taint.org (int-mx1.corp.spamassassin.taint.org\n    [172.16.52.254]) by listman.redhat.com (Postfix) with ESMTP id 9A4893EC17\n    for <exmh-workers@listman.redhat.com>; Wed, 24 Jul 2002 05:35:09 -0400\n    (EDT)\nReceived: (from mail@localhost) by int-mx1.corp.spamassassin.taint.org (8.11.6/8.11.6)\n    id g6O9ZAC22864 for exmh-workers@listman.redhat.com; Wed, 24 Jul 2002\n    05:35:10 -0400\nReceived: from mx1.spamassassin.taint.org (mx1.spamassassin.taint.org [172.16.48.31]) by\n    int-mx1.corp.redhat.com (8.11.6/8.11.6) with SMTP id g6O9Z9R22860 for\n    <exmh-workers@redhat.com>; Wed, 24 Jul 2002 05:35:09 -0400\nReceived: from tippex.localdomain (h189n1fls22o974.telia.com\n    [213.64.79.189]) by mx1.redhat.com (8.11.6/8.11.6) with SMTP id\n    g6O9NRs32512 for <exmh-workers@redhat.com>; Wed, 24 Jul 2002 05:23:28\n    -0400\nReceived: by tippex.localdomain (Postfix, from userid 500) id D1035470D;\n    Wed, 24 Jul 2002 11:34:57 +0200 (CEST)\nReceived: from tippex.localdomain (localhost [127.0.0.1]) by\n    tippex.localdomain (Postfix) with ESMTP id C6534470C; Wed, 24 Jul 2002\n    11:34:57 +0200 (CEST)\nX-Mailer: exmh version 2.5_20020724 01/15/2001 with nmh-1.0.4\nTo: Chris Garrigues <cwg-dated-1027805573.3ce2ae@DeepEddy.Com>,\n\texmh-workers@redhat.com\nSubject: PATCH (was: Re: Another bug)\nIn-Reply-To: Message from Anders Eriksson <aeriksson@fastmail.fm> of\n    \"Tue, 23 Jul 2002 02:20:35 +0200.\"\n    <20020723002041.2624D470D@tippex.localdomain>\nMIME-Version: 1.0\nContent-Type: multipart/mixed ; boundary=\"==_Exmh_6514812010\"\nFrom: Anders Eriksson <aeriksson@fastmail.fm>\nMessage-Id: <20020724093457.D1035470D@tippex.localdomain>\nX-Loop: exmh-workers@spamassassin.taint.org\nSender: exmh-workers-admin@spamassassin.taint.org\nErrors-To: exmh-workers-admin@spamassassin.taint.org\nX-Beenthere: exmh-workers@spamassassin.taint.org\nX-Mailman-Version: 2.0.1\nPrecedence: bulk\nList-Help: <mailto:exmh-workers-request@spamassassin.taint.org?subject=help>\nList-Post: <mailto:exmh-workers@spamassassin.taint.org>\nList-Subscribe: <https://listman.spamassassin.taint.org/mailman/listinfo/exmh-workers>,\n    <mailto:exmh-workers-request@redhat.com?subject=subscribe>\nList-Id: Discussion list for EXMH developers <exmh-workers.spamassassin.taint.org>\nList-Unsubscribe: <https://listman.spamassassin.taint.org/mailman/listinfo/exmh-workers>,\n    <mailto:exmh-workers-request@redhat.com?subject=unsubscribe>\nList-Archive: <https://listman.spamassassin.taint.org/mailman/private/exmh-workers/>\nDate: Wed, 24 Jul 2002 11:34:52 +0200\n\nThis is a multipart MIME message.\n\n--==_Exmh_6514812010\nContent-Type: text/plain; charset=us-ascii\n\n\n\ncwg-dated-1027805573.3ce2ae@DeepEddy.Com said:\n> I just checked in a code cleanup which doesn't address this issue,\n> but does  take a machete to code right around it.  You ought to 'cvs\n> update' and see if  your issue becomes any clearer with all the\n> brush removed.\n\n> My patch notes that 'msgid' and 'line' are redundant with one\n> another and removes  one or the other from functions which takes\n> both.  The callers are then  changed to pass what the function\n> expects.  In the case of Msg_Change, the  'line' argument is removed\n> and we only have the msgid argument.  Ftoc_ClearCurrent is now the\n> first line of MsgChange. \n\nThe following patch removes Ftoc_RescanLine in favour of a \nFtoc_RescanLines. It runs scan(1) on a list of lines and updates ftoc \naccordingly. The patch also changes all the callers to make use of it.\n\nIt also changes Ftoc_ClearCurrent to work of an argument instead of \nfalsily clearing a message that's still Current on disk. All in an \neffort to get a one-to-one disk-display correspondence.\n\nIt does add ~30 -- ~ 75 ms (~<10%) to the execution time depending on \nfolder size due to the invocation of scan. However this version does \nnot try to second guess the mh version of scan so if you have exotic \nscanlines it tells the truth. As a side effect the '+' sign now \ncorresponds better to what's on disk.\n\nComments appreciated. I'm going to be offlike for a couple of days, \nso I send the cvs diff rather than putting it in the cvs.\n\n/Anders\n\n\n\n--==_Exmh_6514812010\nContent-Type: application/x-patch ; name=\"exmh.patch\"\nContent-Description: exmh.patch\nContent-Disposition: attachment; filename=\"exmh.patch\"\n\nIndex: lib/ftoc.tcl\n===================================================================\nRCS file: /cvsroot/exmh/exmh/lib/ftoc.tcl,v\nretrieving revision 1.29\ndiff -u -b -B -w -p -r1.29 ftoc.tcl\n--- lib/ftoc.tcl\t22 Jul 2002 21:46:35 -0000\t1.29\n+++ lib/ftoc.tcl\t24 Jul 2002 09:16:25 -0000\n@@ -558,7 +558,7 @@ proc FtocPickRange { {addcurrent 0} } {\n \tif {$addcurrent} {\n \t    Ftoc_RangeHighlight $ftoc(curLine) $ftoc(curLine)\n \t}\n-\tFtoc_ClearCurrent\n+\tFtoc_ClearCurrent $ftoc(curLine)\n \tMsg_ClearCurrent\n \tset ftoc(curLine) {}\n     }\n@@ -611,31 +611,55 @@ proc Ftoc_NewFtoc {} {\n # Ftoc_ClearCurrent and Ftoc_Change are two parts of\n # dinking the ftoc display when advancing a message.\n \n-proc Ftoc_ClearCurrent {} {\n-    # Clear display of current message\n+#\n+# Make line no longer appear as the currently selected line\n+#\n+\n+proc Ftoc_ClearCurrent { line } {\n     global ftoc exwin\n     set ftoc(pickone) 1\n     set ftoc(lineset) {}\n \n-    if {$ftoc(curLine) == {}} {\n-\tset ftoc(curLine) [Mh_Cur $ftoc(folder)]\n-    }\n-    if {$ftoc(curLine) != {}} {\n-\t$exwin(ftext) tag remove cur $ftoc(curLine).0 $ftoc(curLine).end\n-\tFtoc_RescanLine $ftoc(curLine)\n-    }\n-    return $ftoc(curLine)\n-}\n-proc Ftoc_Change { line {show show} } {\n+#We dont need this any more since we work off the line \n+#argument, not $ftoc(curLine)\n+#    if {$ftoc(curLine) == {}} {\n+#      set ftoc(curLine) [Mh_Cur $ftoc(folder)]\n+#    }\n+#    if {$ftoc(curLine) != {}} {\n+#      $exwin(ftext) tag remove cur $ftoc(curLine).0 $ftoc(curLine).end\n+#      Ftoc_RescanLine $ftoc(curLine)\n+#    }\n+     #should check that 0<$line<last line and error otherwise\n+     $exwin(ftext) tag remove cur $line.0 $line.end\n+     Ftoc_RescanLines [list $line]\n+\n+#    return $ftoc(curLine)\n+}\n+\n+#\n+# Make newline the currently selected line\n+# optionally clear oldline from such attribution\n+#\n+proc Ftoc_Change { newline {oldline {}}} {\n+\n     global ftoc exwin\n-    set ftoc(curLine) $line\n+\n+    if {![info exists oldline] || ($oldline==$newline)} {\n+       set oldline {}\n+    }\n+    set ftoc(curLine) $newline\n     if {$ftoc(curLine) == {}} {\n \tset ok 0\n     } else {\n-\tif {$show == \"show\"} {\n \t    $exwin(ftext) tag remove unseen $ftoc(curLine).0 $ftoc(curLine).end\n+\tif {$oldline != {}} {\n+\t    set ftoc(pickone) 1\n+\t    set ftoc(lineset) {}\n+\t    $exwin(ftext) tag remove cur $oldline.0 $oldline.end\n+\t    Ftoc_RescanLines [list $ftoc(curLine) $oldline]\n+\t} else {\n+\t    Ftoc_RescanLines [list $ftoc(curLine)]\n \t}\n-\tFtoc_RescanLine $ftoc(curLine) +\n \t$exwin(ftext) tag add cur $ftoc(curLine).0 $ftoc(curLine).end\n \tset top [$exwin(ftext) index @0,4]\n \tif [catch {expr {$top+1}}] {set top 0}\t;# trap 100.-1 format, iconic\n@@ -695,7 +720,10 @@ proc Ftoc_MarkSeen { ids } {\n \t}\n     }\n }\n-proc Ftoc_RescanLine { ix {plus none} } {\n+#\n+# This one is not used any more. Kept here for reference\n+#\n+proc Ftoc_RescanLine_old { ix {plus none} } {\n     global exmh exwin ftoc\n     if [catch {\n \tset text [$exwin(ftext) get ${ix}.0 ${ix}.end]\n@@ -737,6 +765,57 @@ proc Ftoc_RescanLine { ix {plus none} } \n \tExmh_Error \"FtocRescanLine $ix : $msg\"\n     }\n }\n+\n+\n+#\n+# Rescans a set of lines and updates the ftoc as needed\n+# lines_in: list of line numbers. Ranges (e.g. 200-210) are not allowed\n+#\n+proc Ftoc_RescanLines { lines_in } {\n+    global exmh exwin ftoc mhProfile\n+    \n+    Exmh_Debug Ftoc_RescanLines [ time {\n+       #Sort the lines and weed out duplicates. \n+       #They creep in when we change folders\n+       #set lastCandidate {}\n+       #foreach newCandidate [lsort -integer $lines_in] {\n+       #    if {$newCandidate != $lastCandidate} {\n+       #       lappend lines $newCandidate\n+       #       Exmh_Debug \"** $lines\"\n+       #       set lastCandidate $newCandidate\n+       #    }\n+       #}\n+       #Never mind dupechecking. The only potential is checked for in \n+       #Ftoc_Change and the above takes time (~8 ms)\n+        set lines [lsort -integer $lines_in]\n+\n+       foreach line $lines {\n+           lappend msgnos [Ftoc_MsgNumber $line]\n+       }\n+       set input [open \"|$mhProfile(scan-proc) \\\n+               [list +$ftoc(folder)] \\\n+               [join $msgnos] \\\n+               -width $ftoc(scanWidth)\"]\n+       set texts [split [string trim [read $input] \\n ] \\n ]\n+       catch {close $input}\n+       #Exmh_Debug \"* lines=$lines\\nmsgnos=$msgnos\\ntexts=$texts\"\n+\n+       set ll [llength $lines]\n+       for {set i 0} {$i<$ll} {incr i} {\n+           set line [lindex $lines $i]\n+           set tags [$exwin(ftext) tag names $line.0]\n+           $exwin(ftext) configure -state normal\n+           $exwin(ftext) delete $line.0 $line.end\n+           $exwin(ftext) insert $line.0 [lindex $texts $i]\n+\t   $exwin(ftext) configure -state disabled\n+\t   foreach tag $tags {\n+               $exwin(ftext) tag add $tag $line.0 $line.end\n+\t   }\n+       }\n+   }\n+   ]\n+}\n+\n proc Ftoc_NextImplied { {show show} {implied implied} } {\n     global ftoc\n     if {$ftoc(implied) && $ftoc(direction) == \"prev\"} {\n@@ -793,7 +872,7 @@ proc Ftoc_NextFolder { {implied no} } {\n \t    # If on last message, clear display because the\n \t    # message is moved or deleted\n \t    if {$ftoc(curLine) != {}} {\n-\t\tFtoc_ClearCurrent\n+\t\tFtoc_ClearCurrent $ftoc(curLine)\n \t\tMsg_ClearCurrent\n \t    }\n \t    Exmh_Status \"\"\n@@ -809,7 +888,7 @@ proc Ftoc_NextFolder { {implied no} } {\n \t    return\n \t} else {\n \t    set ftoc(softChange) 1\n-\t    Ftoc_ClearCurrent\n+\t    Ftoc_ClearCurrent $ftoc(curLine)\n \t    Msg_ClearCurrent\n \t    Exmh_Status \"\"\n \t    Exmh_Status \"End of folder; <Next> => $f\" warn\n@@ -1113,7 +1192,7 @@ proc FtocCommit {tagname commitProc {cop\n \t    set ftoc(displayDirty) 1\n \t    Ftoc_ClearMsgCache\n \t    if {$msgid == $curid} {\n-\t\tFtoc_ClearCurrent\n+\t\tFtoc_ClearCurrent $ftoc(curLine)\n \t\tMsg_ClearCurrent\n \t    }\n \t    if {$L == $ftoc(curLine)} {\nIndex: lib/msg.tcl\n===================================================================\nRCS file: /cvsroot/exmh/exmh/lib/msg.tcl,v\nretrieving revision 1.21\ndiff -u -b -B -w -p -r1.21 msg.tcl\n--- lib/msg.tcl\t22 Jul 2002 21:23:48 -0000\t1.21\n+++ lib/msg.tcl\t24 Jul 2002 09:16:26 -0000\n@@ -73,10 +73,20 @@ proc Msg_ShowUnseen { {show show} } {\n     return 0\n }\n proc Msg_ClearCurrent { } {\n-    global msg exmh\n+    global msg exmh ftoc\n+    # Are there cases where this is not true?\n+    if {$ftoc(folder) == $exmh(folder)} { \n+        set prevline [Ftoc_FindMsg [Mh_Cur $ftoc(folder)]]\n+        if {$prevline == {}} {\n+            unset prevline\n+        }\n+    }\n     set msg(id) {}\t\t;# Clear current message\n     set msg(dpy) {}\t\t;# and currently displayed message\n     Mh_ClearCur $exmh(folder)\n+    if {[info exists prevline]} {\n+        Ftoc_ClearCurrent $prevline\n+    }\n     MsgClear\n     Buttons_Current 0\n     Uri_ClearCurrent\n@@ -117,13 +127,13 @@ proc Msg_Change {msgid {show show} } {\n     Exmh_Debug Msg_Change [time [list MsgChange $msgid $show]]\n }\n proc MsgChange {msgid {show show}} {\n-    global exmh exwin msg mhProfile\n+    global exmh exwin msg mhProfile ftoc\n \n-    Ftoc_ClearCurrent\n+    set prevline [Ftoc_FindMsg [Mh_Cur $ftoc(folder)]]\n     Mh_SetCur $exmh(folder) $msgid\n     Ftoc_ShowSequences $exmh(folder)\n     set line [Ftoc_FindMsg $msgid]\n-    if {! [Ftoc_Change $line $show]} {\n+    if {! [Ftoc_Change $line $prevline]} {\n \tExmh_Status \"Cannot find msg $msgid - Rescan?\"\n     } else {\n \tif {$msg(id) == {}} {\n@@ -652,14 +662,17 @@ proc Msg_UUdecode {} {\n }\n \n proc Msg_MarkUnseen {} {\n-    global exmh\n+    global exmh ftoc\n     Msg_CheckPoint\n     Ftoc_Iterate line {\n \tset msgid [Ftoc_MsgNumber $line]\n \tMh_MarkUnseen $exmh(folder) $msgid\n     }\n-    Msg_ClearCurrent\n-    Ftoc_ClearCurrent\n+    Ftoc_RescanLines $ftoc(lineset)\n+    #Why was this needed?\n+    #Msg_ClearCurrent\n+    #Not needed anymore\n+    #Ftoc_ClearCurrent\n     Flist_ForgetUnseen $exmh(folder)\n     Ftoc_ShowSequences $exmh(folder)\n }\nIndex: lib/scan.tcl\n===================================================================\nRCS file: /cvsroot/exmh/exmh/lib/scan.tcl,v\nretrieving revision 1.21\ndiff -u -b -B -w -p -r1.21 scan.tcl\n--- lib/scan.tcl\t22 Jul 2002 22:39:29 -0000\t1.21\n+++ lib/scan.tcl\t24 Jul 2002 09:16:26 -0000\n@@ -265,7 +265,7 @@ proc Scan_CacheUpdate {} {\n # this thing.\n #\n     if !$ftoc(displayValid) {\n-\tset curLine [Ftoc_ClearCurrent]\t\t\t;# Clear +\n+\tFtoc_ClearCurrent $ftoc(curLine)        ;# Clear +\n         if [file writable $cacheFile] {\n             set scancmd \"exec $mhProfile(scan-proc) [list +$folder] \\\n \t\t    -width $ftoc(scanWidth) > [list $cacheFile]\"\n@@ -273,12 +273,12 @@ proc Scan_CacheUpdate {} {\n                 Exmh_Status \"failed to rescan folder $folder: $err\" warn\n             }\n         }\n-\tFtoc_Change $curLine\t;# Restore it\n+\tFtoc_Change $ftoc(curline)              ;# Restore it\n     } elseif [catch {\n \tset cacheIO [open $cacheFile w]\n-\tset curLine [Ftoc_ClearCurrent]\t\t\t;# Clear +\n+\tFtoc_ClearCurrent $ftoc(curLine)        ;# Clear +\n \tset display [$exwin(ftext) get 1.0 \"end -1 char\"]\n-\tFtoc_Change $curLine\t;# Restore it\n+\tFtoc_Change $ftoc(curline)              ;# Restore it\n \tputs $cacheIO $display nonewline\n \tclose $cacheIO\n \tset ftoc(displayDirty) 0\n\n--==_Exmh_6514812010--\n\n\n\n\n_______________________________________________\nExmh-workers mailing list\nExmh-workers@redhat.com\nhttps://listman.redhat.com/mailman/listinfo/exmh-workers\n\n\n"}