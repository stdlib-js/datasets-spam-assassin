{"id":"00693","group":"easy-ham-2","checksum":{"type":"MD5","value":"2183b91fb14b93bdfaab337b915c98bb"},"text":"From fork-admin@xent.com  Tue Jul 23 06:05:37 2002\nReturn-Path: <fork-admin@xent.com>\nDelivered-To: yyyy@localhost.netnoteinc.com\nReceived: from localhost (localhost [127.0.0.1])\n\tby phobos.labs.netnoteinc.com (Postfix) with ESMTP id 25666440C8\n\tfor <jm@localhost>; Tue, 23 Jul 2002 01:05:36 -0400 (EDT)\nReceived: from dogma.slashnull.org [212.17.35.15]\n\tby localhost with IMAP (fetchmail-5.9.0)\n\tfor jm@localhost (single-drop); Tue, 23 Jul 2002 06:05:36 +0100 (IST)\nReceived: from xent.com ([64.161.22.236]) by dogma.slashnull.org\n    (8.11.6/8.11.6) with ESMTP id g6N52s427580 for <jm@jmason.org>;\n    Tue, 23 Jul 2002 06:02:56 +0100\nReceived: from lair.xent.com (localhost [127.0.0.1]) by xent.com (Postfix)\n    with ESMTP id 4F4BC2940A8; Mon, 22 Jul 2002 21:52:05 -0700 (PDT)\nDelivered-To: fork@spamassassin.taint.org\nReceived: by xent.com (Postfix, from userid 1002) id 3CB572940A5;\n    Mon, 22 Jul 2002 21:51:44 -0700 (PDT)\nTo: FoRK@xent.com\nSubject: [Infoworld] Ballmer describes what a Chief Software Architect does\nMessage-Id: <20020723045144.3CB572940A5@xent.com>\nFrom: adam@xent.com (Adam Rifkin)\nSender: fork-admin@xent.com\nErrors-To: fork-admin@xent.com\nX-Beenthere: fork@spamassassin.taint.org\nX-Mailman-Version: 2.0.11\nPrecedence: bulk\nList-Help: <mailto:fork-request@xent.com?subject=help>\nList-Post: <mailto:fork@spamassassin.taint.org>\nList-Subscribe: <http://xent.com/mailman/listinfo/fork>, <mailto:fork-request@xent.com?subject=subscribe>\nList-Id: Friends of Rohit Khare <fork.xent.com>\nList-Unsubscribe: <http://xent.com/mailman/listinfo/fork>,\n    <mailto:fork-request@xent.com?subject=unsubscribe>\nList-Archive: <http://xent.com/pipermail/fork/>\nDate: Mon, 22 Jul 2002 21:51:44 -0700 (PDT)\n\nRohit was wondering what Microsoft's definition of a Chief Software\nArchitect is (and, consequently, what Microsoft thinks is a roadmap).\nHere you go, from Mr. Ballmer to Mr. Gillmor to Mr. FoRK...\nArchitecture is war; love 'em or hate 'em, at least Microsoft\nunderstands that: as Chief SA, BillG oversees all product strategy.\n\n\"There are two things a road map can be. One is just a piece of paper\nthat tells what everyone is doing and records a bunch of bottom-up\nplans. Or it can be something where we impose more broadly our vision\nfrom the top. We are not going to try to get everything shared. ...\nThat's a path for getting everything stopped up. But at the same time we\nare trying to take the top four or five things we are trying to do in\nthe Longhorn wave, Yukon wave, or the .Net wave and really have enough\ntime to have some cross-cutting discussions about how we make that happen.\"\n\n\"Bill [Gates] is dedicated full-time to being chief software\narchitect. He also happens to be chairman of the company, but he spends\nmost of his time being chief software architect. We have a body now that\nmeets every month -- the SLTT [Senior Leadership Technical Team],\nbasically the top people involved in the product-creating strategy --\nand we present and discuss the issues. Bill is driving a process for\neach of these waves. For instance, [he will ask] what are the\ncross-cutting scenarios that I want, and then [he will] get all the\nright product groups together and bring these things in front of the SLTT.\"\n\n\"People talk about what it takes to be a good manager, and people talk\nabout being a good coach and getting people to like you. In a large\norganization those things are important, but at a certain level, ... the\nmost important thing you can do for your people to make them better is\nto give them a framework where they can work in harmony with the other\npeople in the company. And from Bill's perspective, [this framework] is\nthe technical road map and the SLTT process; it is the scenarios. From\nmy perspective, it is the P&L [profit and loss] structure and the\nmultiple businesses because, given how we work, giving people a\nframework that gets them to make the whole bigger than the sum of the\nparts will mean we have better offerings.\"\n\n\n\nhttp://www.infoworld.com/articles/pl/xml/02/07/22/020722plballmer.xml\n\nBallmer in charge \nJuly 18, 2002 1:01 pm PT\n\nNO ONE KNOWS better than Microsoft CEO Steve Ballmer that, as the .Net\nplatform evolves, the success of Microsoft depends on how well the\ncompany coordinates its tool, server, and client strategies and how well\nit communicates that vision. In an interview with InfoWorld Test Center\nDirector Steve Gillmor and InfoWorld Editor at Large Ed Scannell at\nMicrosoft Fusion 2002, Ballmer discussed the progress of .Net, changes\nin the company's approach to product development, and Microsoft's\nefforts to simplify product licensing and inspire trust in customers and\npartners.\n\n> Last time we talked was two years ago, at the beginning of the .Net\n> era. So where are we now in the .Net evolution?\n\nLet me start by talking about where I think we are in the XML revolution\nfirst, and then [I will] talk about where we are with .Net. I believe\nthat the IT industry collectively decided over the last three or four\nyears that the world was going to be replatformed with XML as the key\nfoundation. It's not like anyone ever got together to decide this, but\nit's like magnetic north, where it's been clearly indicated that\neveryone is rallying around the concept. But I think the degree to which\n[XML] is pervasive might still be underestimated. A lot of partners,\neven at this conference, see it as b-to-b for big companies. But it is\nreally about the way software in general is designed. It is all about\nthe way security should work. Management -- everything is changed.\n\nSo to answer your direct question, two years ago I might have said the\njury is still out about whether [XML] was going to happen. We were\nquestioning if it was going to be a legitimate competitor to Java. But\nnow the world has decided to embrace [XML] as the basis for the next\ngeneration of technology. And there are a lot of benefits that come with\nit. Could it have been something other than XML? Sure it could have. It\nwasn't the specific technical implementation; it is merely the fact that\nit comes out of Internet standards. It has deeper semantic abilities. It\nis all about interoperability and connection.\n\nSo in that context, where are we with .Net? I'll say a couple\nthings. No. 1, I would say we have some momentum in the market. We have\ncustomers using the .Net product line, like Merrill [Lynch], Credit\nSuisse, Marks & Spencer, CitiBank, and a variety of others. People who\nare doing some things for real. I feel like the degree we are out front\nis in some ways smaller and in some ways larger.\n\n> How so?\n\nSmaller in the sense that everyone is talking the XML talk, even Sun;\nbigger in the execution sense: We've delivered. We delivered the first\nbatch of products that really were built XML to the core -- Visual\nStudio .Net and BizTalk Server -- and we are getting traction. So I feel\ngood about where our execution is relative to everyone else. That is not\nto say that other people aren't doing some reasonable bolt-on XML\nsupport for the stuff they have.\n\n> You have some heavy lifting to do to convince your customers and\n> partners to follow along. What do you have to do to set the standard\n> for adoption and upgrading to this next generation?\n\nWe have to present the picture that we are behaving consistently within\nthe framework of focusing on customer issues and customer satisfaction\nand trustworthy computing, which we have articulated. Now there are some\nthings I would have done differently, in 20-20 hindsight. I would have\nincreased the focus on not just security but deployment, because a lot\nof the security problems are actually deployment problems. We have the\nfix, but sometimes we can't get the tools in their hands to deploy those\nfixes fast enough. Licensing -- I know I would have given more time, and\nthere are better ways to plan around the kinds of changes we made. We\nare still going to have to get smart about the full ramifications.\n\n> Do you expect any changes to be made between now and July 31 to\n> Licensing 6.0? There is a lot of push-back on this.\n\nNo, there is nothing that will happen between now and July 31. And we\nwill continue to learn over time what we need to do to earn our\ncustomers' trust and earn their business. I think many of the people who\nare pushing back really don't even know the new terms.\n\n> Isn't that your fault for not educating them?\n\nYes, it is our fault. But you meet with plenty of customers whose\ncompanies already have licenses, and they are saying, 'I think there's a\nproblem.' I don't deny there are some problems. I am sure there are some\nissues we will have to work on over time.\n\nAfter July 31 we are going to see what the real issues are. I was\ntalking to a customer at the show who was saying he thought there would\nbe a problem, and I told him that we just completed a deal with his\ncompany and that he is now universally licensed and that total costs to\nhis company are now lower than they were before. And he said, 'Oh really?'\n\nSo we'll go through July 31. We have a lot of customers who have signed\nlicenses, and I am sure we are going to find some issues. My bigger\nconcerns today are probably not in the larger accounts, but there may be\nsome issues we need to address among the smaller-size companies, and we will.\n\n> How does the .Net initiative change the way in-house client and server\n> developers work together? \n\nWhat we are trying to do for the health of .Net and the health of the\ncompany and the sanity of the people who work there and the quality of\nthe products we produce is to have a more orchestrated, ï¿½ber-road map\nof where we are going.\n\nNow there are two things a road map can be. One is just a piece of paper\nthat tells what everyone is doing and records a bunch of bottom-up\nplans. Or it can be something where we impose more broadly our vision\nfrom the top. We are not going to try to get everything shared. ...\nThat's a path for getting everything stopped up. But at the same time we\nare trying to take the top four or five things we are trying to do in\nthe Longhorn wave, Yukon wave, or the .Net wave and really have enough\ntime to have some cross-cutting discussions about how we make that happen.\n\nBill [Gates] is dedicated full-time to being chief software\narchitect. He also happens to be chairman of the company, but he spends\nmost of his time being chief software architect. We have a body now that\nmeets every month -- the SLTT [Senior Leadership Technical Team],\nbasically the top people involved in the product-creating strategy --\nand we present and discuss the issues. Bill is driving a process for\neach of these waves. For instance, [he will ask] what are the\ncross-cutting scenarios that I want, and then [he will] get all the\nright product groups together and bring these things in front of the SLTT.\n\nPeople talk about what it takes to be a good manager, and people talk\nabout being a good coach and getting people to like you. In a large\norganization those things are important, but at a certain level, ... the\nmost important thing you can do for your people to make them better is\nto give them a framework where they can work in harmony with the other\npeople in the company. And from Bill's perspective, [this framework] is\nthe technical road map and the SLTT process; it is the scenarios. From\nmy perspective, it is the P&L [profit and loss] structure and the\nmultiple businesses because, given how we work, giving people a\nframework that gets them to make the whole bigger than the sum of the\nparts will mean we have better offerings.\n\n> It seems the scenarios construct is really working for you. Is this an\n> evolution of the solutions approach? \n\nI would say it is a pretty direct extrapolation from the solutions\nstuff, only I think we are just getting a little more experience. I\nthink we use the word scenarios more often and solutions less, because\nsolution sounds more like a fixed thing. At the end of the day, most of\nthe things we do are customizable and programmable, and so people make\nthem into the solution they want. But they are still scenarios. What\nwill software deployment look like? Well, that is a scenario because it\ninvolves Windows, Office, and other applications.\n\nWe are working hard to make sure the whole is bigger than the sum of the\nparts. That's not to say people are always comfortable with this. I\ncan't even say we will do it perfectly. All we have to do is do it a lot\nbetter than we had been doing it. I think that would be a big step\nforward for the customers.\n\n> Will this approach cut down on some of the technology civil wars\n> Microsoft has had in the past involving who is going to gain control of\n> a project? This seems to be a very democratic approach to development.\n\nI would not use the word democracy to describe it. People have to come\ntogether and ultimately make some decisions. This is not a voting\nprocess here, the agenda of what we think is important. We get a lot of\ninput. [But] once it is decided, people don't get to vote with their feet.\n\nWe try to make a quantum leap here in terms of our ability to improve\npulling together all the pieces. Our customers want us to do\nthat. Simplifying concepts by unifying them. The customers don't say\nthey want us to do that, but when we do do that, they go, 'Ahhh, I get\nit. That makes sense.'\n\nI don't want to go to six more meetings where people say, 'Is your\nworkflow strategy BizTalk?' ... Or 'What's your Office workflow\nstrategy?' Or 'Why is synchronization in some ways better for e-mail and\nOutlook than it is for file folders and Web pages?'\n\nTo get that sort of synchronization sometimes -- to get that high-level\nroad map to work -- you have to build something we don't have today. So\nwe have been talking about unifying storage. And so the best way to get\nall this stuff to work is to get them all to work just one way. Then you\njust keep tuning one set of parameters instead of having a thousand\nflowers blooming.\n\n> In your Fusion keynote today, you talked about who your competitors\n> are, and it was the usual suspects. But one you didn't mention is\n> yourself. You are competing against the last generation of your technology.\n\nAlways. Given that our stuff doesn't wear out or break down -- you can\nquestion whether it breaks or not [Ballmer grins] -- but it doesn't\nbreak down like machinery does. To get anyone to do something new, we\nhave to have something interesting and innovative.\n\nPeople think, OK, should we just do more upgrades or try to sell more\nnew product? We decided that users like us to do a level of systems\nintegration so they don't have to get involved in that. So take\nSharepoint Team Services, which we put in Office. We could have sold\nTeam Services as a separate product, and we could have introduced a new\nSKU [stock keeping unit]. We could have decided if it should work down\nlevel with the old Office or just the new version of Office, and we\ncould do that with real-time communications. But we tend to like to put\nthings together, integrate them, and then release batches?1202?-- which\nare then 'upgrades' -- as a form of introducing our new innovation. But\nno matter how you do it, because our stuff does not wear out, we have to\nconvince people that some idea we have is better or more powerful than\nthe older idea we had.\n\nAnd there are two aspects of doing that. One aspect is, on a given\nproduct or upgrade release, does that make sense? Or do we convince you\nthat over an nyear period of time we will have enough innovation that\nyou will want to be licensed for that innovation. And this is part of\nthis whole licensing discussion we are having.\n\nWe moved to the new licensing for two reasons, I would say. No. 1, we\nwanted to simplify our licensing. When we look back a year from now, I\nguarantee you that where we are now is simpler than where we\nwere. Nothing is simpler during a transition because they are learning\nthe new and are more familiar with the old, but I think people will\neventually realize this is simpler. Our licensing got pretty complicated\nover the years, and some people came to not understand it all.\n\nThe other issue is [the timing of delivering] our innovation. I don't\nwant to have a lot of rough questions [from customers]. So when we do\nhave new ideas, it's like, OK, should we put it in this upgrade or that\none or just have a stream of stuff that only our best customers have\naccess to under the terms of their contract? I think in the long run we\nhave a better chance of satisfying them with the latter than with\nhitting them with six different upgrades. I am a fan of [letting] the\ncustomer decide, OK, I want that piece or this piece. But they are\nlicensed for all of it. So those are the two things we sought to do.\n\n> That gets back to the trust issue, where if you front-load it, that's\n> the big, lumpy upgrade; and if you back-load it with the vision, the\n> .Net 2003 servers, you have a long gap in the middle where you have to\n> sell into an untrusting audience.\n\nThe truth is, we need to be better at both. There are some things you\ncan only do big and lumpy, like a new file system. It's not like some\nsort of small user feature; if you change the file system, then the\nstorage, the backup, probaby those things are going to change. Probably\nthe shell ought to change.The applications ... a lot of things are going\nto change. Can you call that lumpy? Or you can put out four new features\nin PowerPoint, sure -- that would not look lumpy to users.\n\nI think we have to build trust in the model, and we are going to have to\ndeliver more over time. It will not come overnight. People will have to\nsee that we do a few things, ... that not all of our innovation is\nlumpy, that more of it comes evenly and steadily. People develop a\nconfidence and faith; they like both aspects of the model. Over time,\nour support needs to become more intimately involved in that story.\n\nWe know that, but we don't know exactly what that means yet. And this\nwhole notion of software as a service -- this is not a licensing or\nbusiness discussion. It's how does software get rearchitected in the\nworld of the Internet? I mean, how many software products are\nfundamentally different because of the Internet? Not many. Probably the\nanti-virus guys keep up the best. They are always feeding new virus\nsupport in. I asked the audience [at Fusion] how many use Windows\nUpdate. Now that's a small piece of software, but it is big. That's the\nconsumer market; we've got to get that to really purr in the corporate market.\n\n> The lack of broadband build-out and adoption seems to be holding up\n> the ability for users to take advantage of some new services you're\n> talking about. When Bill [Gates] invested in Comcast cable, it\n> triggered the Baby Bells to get on board with DSL. What are you doing\n> now to deal with that issue?\n\nThe No. 1 thing is, we have to make software that is so compelling that\npeople will start saying, 'Well, of course I am going to get broadband.'\n\n> And 802.11 is one of those compelling features?\n\nYes, it is. I was in a hotel in Sun Valley, [Utah], this week that was\nnot wired. So I turned on my PC, and XP tells me there is a wireless\nnetwork available. So I connect to something called Mountaineer. Well, I\ndon't know what that is. But I have a VPN into Microsoft; it worked. I\ndon't know whose broadband I used. I didn't see it in Bill's room. I\ncalled him up and said, 'Hey, come over to my room.' So soon everyone is\nthere and connecting to the Internet through my room.\n\nWe have to support all the modalities, whether it is GPRS [General\nPacket Radio Service] or 802.11. We have to make it easy to provision\nfrom a software perspective for things that go on with DSL [and] cable\nmodems. ... And the software has to want a broadband link. There are not\nmany things you do where you say I really care about the performance. If\nI am downloading PowerPoint files, then I want broadband. So when you\ncan do things with speed that you otherwise can't do without speed, that\nis going to put a lot of pressure on the broadband community.\n\nThat's the weird answer. The more normal answer is, yeah, isn't it\nawful: There is not enough broadband, and the prices they charge ... . I\nagree with all that. If you look at what happened in Japan recently,\nthere was a big drop -- it is now $25 a month for DSL. Vroom. They have\ngone from almost no DSL connections a year ago to 1.5 [million] or 1.8\nmillion [subscribers].\n\n> So how do we make that happen in this country?\n\nI think that is beyond us. If there is enough interest where the\nconsumers are looking intensely for broadband, whether it is at today's\nprices or tomorrow's prices, that is going to shake out the\nmarketplace. And I think the marketplace will do a good job. We just\nhave to make it something obvious that consumers want. Now I happen to\nlive in a neigborhood where there is no broadband network. No DSL or\ncable modems. Well, I have a neighbor, [Teledesic chairman and co-CEO]\nCraig McCaw, who has a wireless network that I think I can piggyback off\nof [Ballmer laughs]. So, yes, broadband is a bottleneck -- but I also\nthink we have to look at oursleves as a software industry and say,\n'Aren't we, too, some of that bottleneck?' We have not built software\nthat makes broadband a must-have.\n\n> Microsoft CEO weighs in\n> \n> Ballmer addresses a number of key issues for customers and partners.\n> \n> On security and trust: \"There are some things I would have done\n> differently.\"\n> \n> On coordinating product groups: \"We are working hard to make sure\n> the whole is bigger than the sum of the parts.\"  \n>\n> On product licensing: \"We are still going to have to get smart\n> about the full ramifications.\" \n\n\n----\naDaM@XeNT.CoM -- long .sig alert!\n\n\n\nI believe it is quite possible to productively apply both supposedly\nincompatible approaches [REST & SOAP] together.  I'll sketch it out\nbelow, both in prescriptive form.  Note: while this is proscriptive, it\nis expected that local adaptations will be provided.\n\n1. Start by modeling the persistent resources that you wish to expose.\nBy persistent resources, I am referring to entities that have a typical\nlife expectancy of days or greater.  Ensure that each instance has a\nunique URL.  When possible, assign meaningful names to resources.\n\n2. Whenever possible, provide a default XML representation for each\nrepresentation.  Unlike traditional object oriented programming\nlanguages where there is a unique getter per property, typically there\nwill be a single representation of the entire instance.  These\nrepresentations will often contain XLinks (a.k.a. pointers or\nreferences) to other instances.\n\n3. Now add high level methods which take care of all composite create,\nupdate, and delete operations.  A key aspect of the design is that\nmessages for these operations need to be self contained - both the\nsender and receiver should be able to make the absolute minimum of\nassumptions as to the other's state, and multiple requests should not be\nrequired to implement a single logical operation.  All requests should\nprovide the appearance of being executed atomically.\n\n4. Query operations deserve special consideration.  A general purpose\nXML syntax should be provided in every case.  In addition, when a\nreasonable expectation exists that query parameters will be of a\nrelatively short size and not require significant encoding, then a HTTP\nGET with the parameters encoded as a query string should also be\nprovided.\n\nImplications  \n\nThe following table emphasizes how this unified approach differs from\nthe \"pure\" (albeit hypothetical) different positions described above.\n\n1. Resource -- POST operations explicitly have the possibility of\nmodifying multiple resources.  PUT and DELETE operations are rarely\nused, if ever.  GETs may contain query arguments.\n\n2. Get -- GETs must never be used for operations which observably change\nthe state of the recipient.  POST should be used instead.\n\n3. Message -- Do not presume that URLs are static, instead presume that\nthey identify the resource.  In particular, recognize that URLs can be\ndynamically generated.  Expect URLs of other SOAP Resources in\nresponses.  Use the SOAP Response MEP for pure retrieval operations.\n\n4. Procedure -- Treat the URL itself as the implicit first parameter.\nAllow URLs to be dynamically generated, and returned in structures.  Use\nHTTP GET for retrieval operations.\n\nConclusions  \n\nLooking to the future, the application level inter-networking protocols\nthat emerge today will likely be the application level intra-networking\nprotocols of the next decade.  Both REST and SOAP contain features that\nthe others lack.  Most significantly:\n\nREST - SOAP = XLink\n\nThe key bit of functionality that SOAP applications miss today is the\nability to link together resources.  SOAP 1.2 makes significant progress\nin addressing this.  Hopefully WSDL 1.2 will complete this important work.\n\nSOAP - REST = Stored Procedures\n\nLooking at how other large scale systems cope with updates provides some\nkey insights into productive areas for future research with respect to REST.\n\nFinally, it bears repeating.  Just because a service is using HTTP GET,\ndoesn't mean that it is REST.  If you are encoding parameters on the\nURL, you are probably making an RPC request of a service, not retrieving\nthe representation of a resource.  It is worth reading Roy Fielding's\n<http://lists.w3.org/Archives/Public/www-tag/2002Apr/0181.html> thoughts\non the subject.  The only exception to this rule that is routinely\ncondoned within the REST crowd is queries.\n\n  -- Sam Ruby, http://radio.weblogs.com/0101679/stories/2002/07/20/restSoap.html\nhttp://xent.com/mailman/listinfo/fork\n\n\n"}