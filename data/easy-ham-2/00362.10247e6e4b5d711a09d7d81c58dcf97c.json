{"id":"00362","group":"easy-ham-2","checksum":{"type":"MD5","value":"10247e6e4b5d711a09d7d81c58dcf97c"},"text":"From ilug-admin@linux.ie  Tue Aug 13 10:28:55 2002\nReturn-Path: <ilug-admin@linux.ie>\nDelivered-To: yyyy@localhost.netnoteinc.com\nReceived: from localhost (localhost [127.0.0.1])\n\tby phobos.labs.netnoteinc.com (Postfix) with ESMTP id 051944412B\n\tfor <jm@localhost>; Tue, 13 Aug 2002 05:21:49 -0400 (EDT)\nReceived: from phobos [127.0.0.1]\n\tby localhost with IMAP (fetchmail-5.9.0)\n\tfor jm@localhost (single-drop); Tue, 13 Aug 2002 10:21:49 +0100 (IST)\nReceived: from lugh.tuatha.org (root@lugh.tuatha.org [194.125.145.45]) by\n    dogma.slashnull.org (8.11.6/8.11.6) with ESMTP id g7D0OVb10586 for\n    <jm-ilug@jmason.org>; Tue, 13 Aug 2002 01:24:31 +0100\nReceived: from lugh (root@localhost [127.0.0.1]) by lugh.tuatha.org\n    (8.9.3/8.9.3) with ESMTP id BAA14853; Tue, 13 Aug 2002 01:23:55 +0100\nX-Authentication-Warning: lugh.tuatha.org: Host root@localhost [127.0.0.1]\n    claimed to be lugh\nReceived: from mail2.mail.iol.ie (mail2.mail.iol.ie [194.125.2.193]) by\n    lugh.tuatha.org (8.9.3/8.9.3) with ESMTP id BAA14820 for <ilug@linux.ie>;\n    Tue, 13 Aug 2002 01:23:49 +0100\nReceived: from [213.202.164.73] (helo=excalibur.research.wombat.ie) by\n    mail2.mail.iol.ie with esmtp (Exim 3.35 #1) id 17ePLz-0003Qc-00;\n    Tue, 13 Aug 2002 01:16:08 +0100\nReceived: (from kenn@localhost) by excalibur.research.wombat.ie\n    (8.11.6/8.11.6) id g7D0Nkd14513; Tue, 13 Aug 2002 01:23:46 +0100\nDate: Tue, 13 Aug 2002 01:23:46 +0100\nFrom: Kenn Humborg <kenn@linux.ie>\nTo: Nick Murtagh <nickm@go2.ie>\nCc: ilug@linux.ie\nSubject: Re: [ILUG] slashdot EW Dijkstra humor\nMessage-Id: <20020813012346.A14435@excalibur.research.wombat.ie>\nReferences: <NBBBIGEGHIGMPCNKHCECEEGKEAAA.kenn@bluetree.ie>\n    <1029179159.9170.14.camel@gemini.windmill>\nMIME-Version: 1.0\nContent-Type: text/plain; charset=us-ascii\nContent-Disposition: inline\nUser-Agent: Mutt/1.2.5.1i\nIn-Reply-To: <1029179159.9170.14.camel@gemini.windmill>; from nickm@go2.ie\n    on Mon, Aug 12, 2002 at 08:05:58PM +0100\nSender: ilug-admin@linux.ie\nErrors-To: ilug-admin@linux.ie\nX-Mailman-Version: 1.1\nPrecedence: bulk\nList-Id: Irish Linux Users' Group <ilug.linux.ie>\nX-Beenthere: ilug@linux.ie\n\nOn Mon, Aug 12, 2002 at 08:05:58PM +0100, Nick Murtagh wrote:\n> On Mon, 2002-08-12 at 19:56, Kenn Humborg wrote:\n> > Well, you should consider 'break' inside a 'select' statement\n> > to be part of the syntax, rather than a control flow modifier.\n> \n> Why? When it comes down to the assembly level, it gets turned\n> into some kind of jump instruction. Should I pretend I don't know\n> this when I'm programming?\n\nI know that.  And no, you shouldn't.  But see below.\n\n> > A _mandatory_ part of the syntax, at that.\n> \n> It's not mandatory. You can leave out the break, and the flow\n> of control will continue to the next case. Which can be useful\n> in certain circumstances.\n\nI know that, too.\n\nHowever, the discussion was tending towards\n\"don't use things like goto and break to alter flow of control\nin your program\".  While not valid 100% of the time, it's a \nreasonable rule of thumb.  The idea is that, when looking at\ncode, it's easier to see how control moves through a \nfunction if your basic control blocks do all the work.  The\nspecific example of replacing a break in a while loop with\na modified while() expression shows this.  You only have to\nlook in one place to see when you'll run off the end of the\nloop, not hunt through the whole loop.  (Although that particular\nexample wasn't really that good, since the extra test was \nadding on (... || done) and setting done = true in the loop.\nWhich is much the same as a break really.)\n\nThe idea is to surprise the next programmer as little as \npossible when he sees the code.\n\nIn a similar vein, having a break in every case of a select\nblock makes the flow much clearer.  Flow goes in, zero or \none case blocks are executed and flows comes out the bottom.\nLeaving out break statements breaks this assumption.\n\nMy point is that, while there are a few situations where it\nmakes sense to leave out the breaks, I usually tend to \nconsider the break at the end of each case more like the\nbrace at the end of the while block.  \n\nIn fact, maybe it wouldn't have been a bad idea if the language\nwas designed such that the continue statement meant fall through\nand break wasn't needed:\n\n   select (x) {\n      case 1:\n         /* do something - doesn't fall through */\n      case 2:\n         /* do something - falls through to next case*/\n         continue;\n      case 3:\n         /* do something - doesn't fall through */\n      default:\n         /* do something - doesn't fall through */\n   }\n\nStill, hindsight and all that.  Sigh.\n\nLater,\nKenn\n\n\n\n-- \nIrish Linux Users' Group: ilug@linux.ie\nhttp://www.linux.ie/mailman/listinfo/ilug for (un)subscription information.\nList maintainer: listmaster@linux.ie\n\n\n"}