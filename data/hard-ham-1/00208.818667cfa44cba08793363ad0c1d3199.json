{"id":"00208","group":"hard-ham-1","checksum":{"type":"MD5","value":"818667cfa44cba08793363ad0c1d3199"},"text":"Return-Path: linux-xfs-bounce@oss.sgi.com\nDelivery-Date: Fri Sep  6 05:16:13 2002\nReturn-Path: <linux-xfs-bounce@oss.sgi.com>\nReceived: from oss.sgi.com (oss.sgi.com [128.167.58.27])\n\tby eclectic.kluge.net (8.12.6/8.12.6) with ESMTP id g869GCnP027210\n\tfor <felicity@kluge.net>; Fri, 6 Sep 2002 05:16:13 -0400\nReceived: from oss.sgi.com (localhost [127.0.0.1])\n\tby oss.sgi.com (8.12.5/8.12.5) with ESMTP id g869BvtG021440;\n\tFri, 6 Sep 2002 02:11:57 -0700\nReceived: with ECARTIS (v1.0.0; list linux-xfs); Fri, 06 Sep 2002 02:11:08 -0700 (PDT)\nReceived: from relay.pair.com (relay1.pair.com [209.68.1.20])\n\tby oss.sgi.com (8.12.5/8.12.5) with SMTP id g869B1tG021236\n\tfor <linux-xfs@oss.sgi.com>; Fri, 6 Sep 2002 02:11:01 -0700\nReceived: (qmail 546 invoked from network); 6 Sep 2002 09:15:09 -0000\nReceived: from unknown (HELO mountainviewdata.com) (210.72.245.13)\n  by relay1.pair.com with SMTP; 6 Sep 2002 09:15:09 -0000\nX-pair-Authenticated: 210.72.245.13\nMessage-ID: <3D7944C7.6020309@mountainviewdata.com>\nDate: Fri, 06 Sep 2002 17:13:59 -0700\nFrom: tom <twang@mountainviewdata.com>\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.1a+) Gecko/20020626\nX-Accept-Language: en-us, en\nMIME-Version: 1.0\nTo: linux-xfs@oss.sgi.com\nSubject: a deadlock problem\nContent-Type: text/plain; charset=us-ascii; format=flowed\nContent-Transfer-Encoding: 7bit\nX-archive-position: 289\nX-ecartis-version: Ecartis v1.0.0\nSender: linux-xfs-bounce@oss.sgi.com\nErrors-to: linux-xfs-bounce@oss.sgi.com\nX-original-sender: twang@mountainviewdata.com\nPrecedence: bulk\nX-list: linux-xfs\nX-Reject: Spamassassin match!\nX-IMAPbase: 1031314884 13 NotJunk Junk\nX-Keywords: NotJunk\n\nHi XFS developers,\nWhen studying xfs code(2.4.19), I found that the inode will be locked by \nXFS_ILOCK_SHARE flags before we get acl, which may cause deadlock.\nBecause when getting acl, it will allocate memory in KM_SLEEP, If the \nmemory is tight, the process will call xfs_strategy, and may \nlock(XFS_ILOCK_SHARE)the same inode again. If between these two locks, \nanother process try to lock the inode by XFS_ILOCK_EXCL, these two \nprocesses  will be deadlock. As follows,\n\n    A process get ea                         B process want lock ipA\n\n1) xfs_ilock(ipA, XFS_ILOCK_SHARE)             .....................\n            |                                         |\n            |                                         |\n         get acl                        2) xfs_ilock(ipA, XFS_ILOCK_EXCL)\n            |                                         |\n            |                                         |\n        memory tight\n            |\n            |\n        xfs_stragegy\n            |\n            |\n3)xfs_ilock(ipA, XFS_ILOCK_SHARE)        ............................\n\n  these two processes will be dead lock.\n\nSo I believe that acl allocation GFP_MASKshould be changed to KM_NOFS.\nright?\n\nbest regards\n                                                 wdd\n\n\n\n\n"}