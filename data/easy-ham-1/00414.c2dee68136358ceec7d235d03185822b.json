{"id":"00414","group":"easy-ham-1","checksum":{"type":"MD5","value":"c2dee68136358ceec7d235d03185822b"},"text":"From fork-admin@xent.com  Wed Sep  4 11:41:44 2002\nReturn-Path: <fork-admin@xent.com>\nDelivered-To: yyyy@localhost.spamassassin.taint.org\nReceived: from localhost (jalapeno [127.0.0.1])\n\tby jmason.org (Postfix) with ESMTP id 6A10416F7B\n\tfor <jm@localhost>; Wed,  4 Sep 2002 11:40:03 +0100 (IST)\nReceived: from jalapeno [127.0.0.1]\n\tby localhost with IMAP (fetchmail-5.9.0)\n\tfor jm@localhost (single-drop); Wed, 04 Sep 2002 11:40:03 +0100 (IST)\nReceived: from xent.com ([64.161.22.236]) by dogma.slashnull.org\n    (8.11.6/8.11.6) with ESMTP id g83MKvZ05458 for <jm@jmason.org>;\n    Tue, 3 Sep 2002 23:20:57 +0100\nReceived: from lair.xent.com (localhost [127.0.0.1]) by xent.com (Postfix)\n    with ESMTP id 6F2942940C9; Tue,  3 Sep 2002 15:18:02 -0700 (PDT)\nDelivered-To: fork@spamassassin.taint.org\nReceived: from panacea.canonical.org (ns1.canonical.org [209.115.72.29])\n    by xent.com (Postfix) with ESMTP id 6B789294099 for <fork@xent.com>;\n    Tue,  3 Sep 2002 15:17:08 -0700 (PDT)\nReceived: by panacea.canonical.org (Postfix, from userid 1004) id\n    D93F83F4EB; Tue,  3 Sep 2002 18:17:30 -0400 (EDT)\nFrom: kragen@pobox.com (Kragen Sitaker)\nTo: fork@spamassassin.taint.org\nSubject: asynchronous I/O (was Re: Gasp!)\nMessage-Id: <20020903221730.D93F83F4EB@panacea.canonical.org>\nSender: fork-admin@xent.com\nErrors-To: fork-admin@xent.com\nX-Beenthere: fork@spamassassin.taint.org\nX-Mailman-Version: 2.0.11\nPrecedence: bulk\nList-Help: <mailto:fork-request@xent.com?subject=help>\nList-Post: <mailto:fork@spamassassin.taint.org>\nList-Subscribe: <http://xent.com/mailman/listinfo/fork>, <mailto:fork-request@xent.com?subject=subscribe>\nList-Id: Friends of Rohit Khare <fork.xent.com>\nList-Unsubscribe: <http://xent.com/mailman/listinfo/fork>,\n    <mailto:fork-request@xent.com?subject=unsubscribe>\nList-Archive: <http://xent.com/pipermail/fork/>\nDate: Tue,  3 Sep 2002 18:17:30 -0400 (EDT)\n\nOf course we've had select() since BSD 4.2 and poll() since System V\nor so, and they work reasonably well for asynchronous I/O up to a\nhundred or so channels, but suck after that; /dev/poll (available in\nSolaris and Linux) is one approach to solving this; Linux has a way to\ndo essentially the same thing with real-time signals, and has for\nyears; and FreeBSD has kqueue.\n\nMore details about these are at\nhttp://www.citi.umich.edu/projects/linux-scalability/\n\nNone of this helps with disk I/O; most programs that need to overlap\ndisk I/O with computation, on either proprietary Unixes or Linux, just\nuse multiple threads or processes to handle the disk I/O.\n\nPOSIX specifies a mechanism for nonblocking disk I/O that most\nproprietary Unixes implement.  The Linux kernel hackers are currently\nrewriting Linux's entire I/O subsystem essentially from scratch to\nwork asynchronously, because they can easily build efficient\nsynchronous I/O primitives from asynchronous ones, but not the other\nway around. So now Linux will support this mechanism too.\n\nIt probably doesn't need saying for anyone who's read Beberg saying\nthings like \"Memory management is a non-issue for anyone that has any\nidea at all how the hardware functions,\" but he's totally off-base.\nPeople should know by now not to take anything he says seriously, but\napparently some don't, so I'll rebut.\n\nNot surprisingly, the rebuttal requires many more words than the\noriginal stupid errors.\n\nIn detail, he wrote:\n> Could it be? After 20 years without this feature UNIX finally\n> catches up to Windows and has I/O that doesnt [sic] totally suck for\n> nontrivial apps? No way!\n\nUnix acquired nonblocking I/O in the form of select() about 23 years\nago, and Solaris has had the particular aio_* calls we are discussing\nfor many years.  Very few applications need the aio_* calls ---\nessentially only high-performance RDBMS servers even benefit from them\nat all, and most of those have been faking it fine for a while with\nmultiple threads or processes.  This just provides a modicum of extra\nperformance.\n\n> OK, so they do it with signals or a flag, which is completely\n> ghetto, but at least they are trying. Keep trying guys, you got the\n> idea, but not the clue.\n\nReaders can judge who lacks the clue here.\n\n> The Windows I/O model does definately [sic] blow the doors off the\n> UNIX one, but then they had select to point at in it's [sic]\n> suckiness and anything would have been an improvement. UNIX is just\n> now looking at it's [sic] I/O model and adapting to a multiprocess\n> multithreaded world so it's gonna be years yet before a posix API\n> comes out of it.\n\nAlthough I don't have a copy of the spec handy, I think the aio_* APIs\ncome from the POSIX spec IEEE Std 1003.1-1990, section 6.7.9, which is\n13 years old, and which I think documented then-current practice.\nThey might be even older than that.\n\nUnix has been multiprocess since 1969, and most Unix implementations\nhave supported multithreading for a decade or more.\n\n> Bottom line is the \"do stuff when something happens\" model turned\n> out to be right, and the UNIX \"look for something to do and keep\n> looking till you find it no matter how many times you have to look\"\n> is not really working so great anymore.\n\nLinux's aio_* routines can notify the process of their completion with\na \"signal\", a feature missing in Microsoft Windows; a \"signal\" causes\nthe immediate execution of a \"signal handler\" in a process.  By\ncontrast, the Microsoft Windows mechanisms to do similar things (such\nas completion ports) do not deliver a notification until the process\npolls them.\n\nI don't think signals are a better way to do things in this case\n(although I haven't written any RDBMSes myself), but you got the\ntechnical descriptions of the two operating systems exactly backwards.\nMost programs that use Linux real-time signals for asynchronous\nnetwork I/O, in fact, block the signal in question and poll the signal\nqueue in a very Windowsish way, using sigtimedwait() or sigwaitinfo().\n\n-- \n<kragen@pobox.com>       Kragen Sitaker     <http://www.pobox.com/~kragen/>\nEdsger Wybe Dijkstra died in August of 2002.  This is a terrible loss after \nwhich the world will never be the same.\nhttp://www.xent.com/pipermail/fork/2002-August/013974.html\n\n"}