{"id":"01671","group":"easy-ham-1","checksum":{"type":"MD5","value":"572d5d58699f0b03e959bbdc6ee14e83"},"text":"Return-Path: tim.one@comcast.net\nDelivery-Date: Fri Sep  6 20:43:56 2002\nFrom: tim.one@comcast.net (Tim Peters)\nDate: Fri, 06 Sep 2002 15:43:56 -0400\nSubject: [Spambayes] Deployment\nIn-Reply-To: <200209061431.g86EVM114413@pcp02138704pcs.reston01.va.comcast.net>\nMessage-ID: <LNBBLJKPBEHFEDALKOLCEEJCBCAB.tim.one@comcast.net>\n\n[Guido]\n> Takers?  How is ESR's bogofilter packaged?  SpamAssassin?  The Perl\n> Bayes filter advertised on slashdot?\n\nWRT the last, it's a small pile of Windows .exe files along with\ncygwin1.dll.  The .exes are cmdline programs.  One is a POP3 proxy.  If I\ncurrently have an email server named, say, mail.comcast.net, with user name\ntimmy, then I change my email reader to say that my server is 127.0.0.1, and\nthat my user name on that server is mail.comcast.net:timmy.  In that way the\nproxy picks up both the real server and user names from what the mail reader\ntells it the user name is.\n\nThis is an N-way classifier (like ifile that way), and \"all it does\" is\ninsert a\n\n    X-Text-Classification:  one_of_the_class_names_you_picked\n\nheader into your email before passing it on to your mail reader.  The user\nthen presumably fiddles their mail reader to look for such headers and \"do\nsomething about it\" (and even Outlook can handle *that* much <wink>).\n\nThe user is responsible for generating text files with appropriate examples\nof each class of message, and for running the cmdline tools to train the\nclassifier.\n\n"}