{"id":"01641","group":"easy-ham-1","checksum":{"type":"MD5","value":"af4f10c1dad2aea2637aa8cd093adc34"},"text":"Return-Path: guido@python.org\nDelivery-Date: Fri Sep  6 15:31:22 2002\nFrom: guido@python.org (Guido van Rossum)\nDate: Fri, 06 Sep 2002 10:31:22 -0400\nSubject: [Spambayes] Deployment\nMessage-ID: <200209061431.g86EVM114413@pcp02138704pcs.reston01.va.comcast.net>\n\nQuite independently from testing and tuning the algorithm, I'd like to\nthink about deployment.\n\nEventually, individuals and postmasters should be able to download a\nspambayes software distribution, answer a few configuration questions\nabout their mail setup, training and false positives, and install it\nas a filter.\n\nA more modest initial goal might be the production of a tool that can\neasily be used by individuals (since we're more likely to find\nindividuals willing to risk this than postmasters).\n\nThere are many ways to do this.  Some ideas:\n\n- A program that acts both as a pop client and a pop server.  You\n  configure it by telling it about your real pop servers.  You then\n  point your mail reader to the pop server at localhost.  When it\n  receives a connection, it connects to the remote pop servers, reads\n  your mail, and gives you only the non-spam.  To train it, you'd only\n  need to send it the false negatives somehow; it can assume that\n  anything is ham that you don't say is spam within 48 hours.\n\n- A server with a custom protocol that you send a copy of a message\n  and that answers \"spam\" or \"ham\".  Then you have a little program\n  that is invoked e.g. by procmail that talks to the server.  (The\n  server exists so that it doesn't have to load the pickle with the\n  scoring database for each message.  I don't know how big that pickle\n  would be, maybe loading it each time is fine.  Or maybe\n  marshalling.)\n\n- Your idea here.\n\nTakers?  How is ESR's bogofilter packaged?  SpamAssassin?  The Perl\nBayes filter advertised on slashdot?\n\n--Guido van Rossum (home page: http://www.python.org/~guido/)\n"}