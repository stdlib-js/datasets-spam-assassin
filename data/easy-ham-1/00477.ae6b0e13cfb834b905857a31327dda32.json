{"id":"00477","group":"easy-ham-1","checksum":{"type":"MD5","value":"ae6b0e13cfb834b905857a31327dda32"},"text":"From fork-admin@xent.com  Sat Sep  7 21:52:42 2002\nReturn-Path: <fork-admin@xent.com>\nDelivered-To: yyyy@localhost.spamassassin.taint.org\nReceived: from localhost (jalapeno [127.0.0.1])\n\tby jmason.org (Postfix) with ESMTP id 8281416F18\n\tfor <jm@localhost>; Sat,  7 Sep 2002 21:52:19 +0100 (IST)\nReceived: from jalapeno [127.0.0.1]\n\tby localhost with IMAP (fetchmail-5.9.0)\n\tfor jm@localhost (single-drop); Sat, 07 Sep 2002 21:52:19 +0100 (IST)\nReceived: from xent.com ([64.161.22.236]) by dogma.slashnull.org\n    (8.11.6/8.11.6) with ESMTP id g86KLLC22654 for <jm@jmason.org>;\n    Fri, 6 Sep 2002 21:21:21 +0100\nReceived: from lair.xent.com (localhost [127.0.0.1]) by xent.com (Postfix)\n    with ESMTP id 21833294287; Fri,  6 Sep 2002 13:16:03 -0700 (PDT)\nDelivered-To: fork@spamassassin.taint.org\nReceived: from localhost.localdomain (pm0-8.sba1.netlojix.net\n    [207.71.218.8]) by xent.com (Postfix) with ESMTP id 55EC929427E for\n    <fork@xent.com>; Fri,  6 Sep 2002 13:15:34 -0700 (PDT)\nReceived: (from dave@localhost) by maltesecat (8.8.7/8.8.7a) id NAA21491;\n    Fri, 6 Sep 2002 13:25:33 -0700\nMessage-Id: <200209062025.NAA21491@maltesecat>\nTo: fork@spamassassin.taint.org\nSubject: Re: asynchronous I/O (was Re: Gasp!)\nIn-Reply-To: Message from fork-request@xent.com of\n    \"Fri, 06 Sep 2002 06:25:37 PDT.\"\n    <20020906132537.6311.58517.Mailman@lair.xent.com>\nFrom: Dave Long <dl@silcom.com>\nSender: fork-admin@xent.com\nErrors-To: fork-admin@xent.com\nX-Beenthere: fork@spamassassin.taint.org\nX-Mailman-Version: 2.0.11\nPrecedence: bulk\nList-Help: <mailto:fork-request@xent.com?subject=help>\nList-Post: <mailto:fork@spamassassin.taint.org>\nList-Subscribe: <http://xent.com/mailman/listinfo/fork>, <mailto:fork-request@xent.com?subject=subscribe>\nList-Id: Friends of Rohit Khare <fork.xent.com>\nList-Unsubscribe: <http://xent.com/mailman/listinfo/fork>,\n    <mailto:fork-request@xent.com?subject=unsubscribe>\nList-Archive: <http://xent.com/pipermail/fork/>\nDate: Fri, 06 Sep 2002 13:25:32 -0700\n\n\n\n> Wrong, [VMS-like async io] makes a huge difference in even what I\n> consider small programs.\n\nSo it sounds as if, to your thinking,\nmost useful apps are also trivial. \nUnless each key on my keyboard were\n(to the apps) distinct event sources,\nI can't think of any of my usual job\nmix that would need hundreds, or even\ntens, of async requests; perhaps you\ncan explain how nontrivial apps will\nbe compellingly useful? \n\n> but it's still not built in, who knows when it will be. The point is it's\n> not portable in either case.\n\nDoes that lack of portability imply it\nisn't generally useful?  (When it was\napparent that TCP networks were useful,\nberkeley sockets could be found even\non VMS and Win 3.1 boxen)\n\nWhy would early Unix have run with the\nidea that, if one wishes to do multiple\nthings at the same time, one can use a\ngroup of processes to do them?\n\n- they had Multics as a counterexample?\n\n- in the days of tiny memories and tapes,\n  people were more accustomed to writing\n  programs that didn't run entirely in a\n  single address space?\n\n- one is a great number for an interface,\n  as log(1) is 0, and specification can\n  be implicit?\n\n- some combination of the above?\n\nNow, as Hoare says:\n> There are two ways of constructing a software design.  One way is to make\n> it so simple that there are obviously no deficiencies and the other is to\n> make it so complicated that there are no obvious deficiencies.\n\nAs programmers, we've been able to make\nour lives complicated for at least half\na century; the hardware interrupt gives\nus the rope.\n\nPart of Dijkstra's inspiration for THE\nwas the counterexample of IBM's multi-\nprogrammed boxes (were these the same\nones that inspired Mythical Man Month?)\nand I suppose he would say the question\nis how not to make a mess of it -- how\nshould we structure computations so if\nwe try to do ten times as many things\nat the same time, reasoning about the\nresulting system is at most ten times\nmore complex -- not one hundred, and\ncertainly not three and a half million\ntimes more.\n\nCompared to that project, the prospect\nof writing a driver library for various\nvendors' aio implementations seems to\nbe truly trivial.\n\n-Dave\n\n(Oracle, in their quest for portability,\nused to use raw disks for the database.\nThis finessed the filesystem issue; did\nit also allow them to roll their own set\nof async drivers?)\n\n\n"}