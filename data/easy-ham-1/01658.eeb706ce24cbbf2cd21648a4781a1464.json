{"id":"01658","group":"easy-ham-1","checksum":{"type":"MD5","value":"eeb706ce24cbbf2cd21648a4781a1464"},"text":"Return-Path: tim.one@comcast.net\nDelivery-Date: Fri Sep  6 17:45:09 2002\nFrom: tim.one@comcast.net (Tim Peters)\nDate: Fri, 06 Sep 2002 12:45:09 -0400\nSubject: [Spambayes] test sets?\nIn-Reply-To: <15736.54481.733005.644033@anthem.wooz.org>\nMessage-ID: <LNBBLJKPBEHFEDALKOLCKEICBCAB.tim.one@comcast.net>\n\n[Barry A. Warsaw, gives answers and asks questions]\n\nHere's the code that produced the header tokens:\n\n    x2n = {}\n    for x in msg.keys():\n        x2n[x] = x2n.get(x, 0) + 1\n    for x in x2n.items():\n        yield \"header:%s:%d\" % x\n\n\nSome responses:\n\n>  0.01    19  3559 'header:X-Mailman-Version:1'\n>  0.01    19  3559 'header:List-Id:1'\n>  0.01    19  3557 'header:X-BeenThere:1'\n>\n> These three are definitely MM artifacts, although the second one\n> /could/ be inserted by other list management software (it's described\n> in an RFC).\n\nSince all the ham came from Mailman, and only 19 spam had it, it's quite\nsafe to assume then that I should ignore these for now.\n\n>  0.01     0  3093 'header:Newsgroups:1'\n>  0.01     0  3054 'header:Xref:1'\n>  0.01     0  3053 'header:Path:1'\n>\n> These aren't MM artifacts, but are byproducts of gating a message off\n> of an nntp feed.  Some of the other NNTP-* headers are similar, but I\n> won't point them out below.\n\nI should ignore these too then.\n\n>  0.01    19  2668 'header:List-Unsubscribe:1'\n>  0.01    19  2668 'header:List-Subscribe:1'\n>  0.01    19  2668 'header:List-Post:1'\n>  0.01    19  2668 'header:List-Help:1'\n>  0.01    19  2668 'header:List-Archive:1'\n>\n> RFC recommended generic listserve headers that MM injects.\n\nDitto.\n\n> So why do you get two entries for this one?\n>\n>  0.99   519     0 'header:Received:8'\n>  0.99   466     1 'header:Received:7'\n\nRead the code <wink>.  The first line counts msgs that had 8 instances of a\n'Received' header, and the second counts msgs that had 7 instances.  I\nexpect this is a good clue!  The more indirect the mail path, the more of\nthose thingies we'll see, and if you're posting from a spam trailer park in\nTasmania you may well need to travel thru more machines.\n\n> ...\n> Note that header names are case insensitive, so this one's no\n> different than \"MIME-Version:\".  Similarly other headers in your list.\n\nIgnoring case here may or may not help; that's for experiment to decide.\nIt's plausible that case is significant, if, e.g., a particular spam mailing\npackage generates unusual case, or a particular clueless spammer\nmisconfigures his package.\n\n>  0.02    65  3559 'header:Precedence:1'\n>\n> Could be Mailman, or not.  This header is supposed to tell other\n> automated software that this message was automated.  E.g. a replybot\n> should ignore any message with a Precedence: {bulk|junk|list}.\n\nRule of thumb:  if Mailman inserts a thing, I should ignore it.  Or, better,\nI should stop trying to out-think the flaws in the test data and get better\ntest data instead!\n\n>  0.50     4     0 'header:2:1'\n>\n> !?\n> ...\n>  0.50     0     2 'header:'\n>\n> Heh?\n\nI sucked out all the wordinfo keys that began with \"header:\".  The last line\nthere  was probably due to unrelated instances of the string \"header:\" in\nmessage bodies.  Harder to guess about the first line.\n\n> ...\n> Some headers of course are totally unreliable as to their origin.  I'm\n> thinking stuff like MIME-Version, Content-Type, To, From, etc, etc.\n> Everyone sticks those in.\n\nThe brilliance of Anthony's \"just count them\" scheme is that it requires no\nthought, so can't be fooled <wink>.  Header lines that are evenly\ndistributed across spam and ham will turn out to be worthless indicators\n(prob near 0.5), so do no harm.\n\n"}