{"id":"01743","group":"easy-ham-1","checksum":{"type":"MD5","value":"07f7f47e25de2b8f08cabfc5ef3e3709"},"text":"Return-Path: gward@python.net\nDelivery-Date: Mon Sep  9 22:01:10 2002\nFrom: gward@python.net (Greg Ward)\nDate: Mon, 9 Sep 2002 17:01:10 -0400\nSubject: [Spambayes] python.org email harvesting ready to roll\nMessage-ID: <20020909210110.GA2224@cthulhu.gerg.ca>\n\n[followups to spambayes@python.org please, unless you're specifically\n concerned about some particular bit of email policy for python.org]\n\nOK, after much fiddling with and tweaking of /etc/exim/exim4.conf and\n/etc/exim/local_scan.py on mail.python.org, I am fairly confident that\nI can start harvesting all incoming email at a moment's notice.  For the\nrecord, here's how it all works:\n\n  * exim4.conf works almost exactly the same as before if the file\n    /etc/exim/harvest does not exist.  That is, any \"junk mail\n    condition\" that can be detected by Exim ACLs (access control lists)\n    is handled entirely in exim4.conf: the message is rejected before it\n    ever gets to local_scan.py.  This covers such diverse cases as\n    \"message from known spammer\" (reject after every RCPT TO command),\n    \"no message-id header\", and \"8-bit chars in subject\" (both rejected\n    after the message headers/body are read).\n\n    The main things I have changed in the absence of /etc/exim/harvest\n    are:\n      - don't check for 8-bit chars in \"From\" header -- the vast\n        majority of hits for this test were bounces from some\n        Asian ISP; the remaining hits should be handled by SpamAssassin\n      - do header sender verification (ie. ensure that there's a\n        verifiable email address in at least one of \"From\", \"Reply-to\",\n        and \"Sender\") as late as possible, because it requires DNS\n        lookups which can be slow (and can also make messages that\n        should have been rejected merely be deferred, if those DNS\n        lookups timeout)\n\n  * if /etc/exim/harvest exists, then the behaviour of all of those\n    ACLs in exim4.conf suddenly changes: instead of rejecting recipients\n    or messages, they add an X-reject header to the message.  This\n    header is purely for internal use; it records the name of the folder\n    to which the rejected message should be saved, and also gives the\n    SMTP error message which should ultimately be used to reject\n    the message.\n\n    Thus, those messages will now be seen by local_scan.py, which now\n    looks for the X-reject header.  If found, it uses the folder name\n    specified there to save the message, and then rejects it with the\n    SMTP error message also given in X-reject.  (Currently X-reject is\n    retained in saved messages.)\n\n    If a message was not tagged with X-reject, then local_scan.py\n    runs the usual virus and spam checks.  (Namely, my homebrew\n    scan for attachments with filenames that look like Windows\n    executables, and a run through SpamAssassin.)  The logic is\n    basically this:\n      if virus:\n          folder = \"virus\"\n      else:\n          run through SpamAssassin\n          if score >= 10.0:\n              folder = \"rejected-spam\"\n          elif score >= 5.0:\n              folder = \"caught-spam\"\n\n    Finally, local_scan.py writes the message to the designated folder.\n    By far the biggest folder will be \"accepted\" -- the server handles\n    2000-5000 incoming messages per day, of which maybe 100-500 are junk\n    mail.  (Oops, just realized I haven't written the code that actually\n    saves the message -- d'ohh!  Also haven't written anything to\n    discriminate personal email, which I must do.  Sigh.)\n\n  * finally, the big catch: waiting until after you've read the message\n    headers and body to actually reject the message is problematic,\n    because certain broken MTAs (including those used by some spammers)\n    don't consider a 5xx after DATA as a permanent error, but keep\n    retrying.  D'ohh.  This is a minor annoyance currently, where a fair\n    amount of stuff is rejected at RCPT TO time.  But in harvest mode,\n    *everything* (with the exception of people probing for open relays)\n    will be rejected at DATA time.  So I have cooked up something called\n    the ASBL, or automated sender blacklist.  This is just a Berkeley DB\n    file that maps (sender_ip, sender_address) to an expiry time.  When\n    local_scan() rejects a message from (sender_ip, sender_address) --\n    for whatever reason, including finding an X-reject header added by\n    an ACL in exim4.conf -- it adds a record to the ASBL, with an expiry\n    time 3 hours in the future.  Meanwhile, there's an ACL in exim4.conf\n    that checks for records in the ASBL; if there's a record for the\n    current (sender_ip, sender_address) that hasn't expired yet, we\n    reject all recipients without ever looking at the message headers or\n    body.\n\n    The downside of this from the point-of-view of corpus collection is\n    that if some jerk is busily spamming *@python.org, one SMTP\n    connection per address, we will most likely only get one copy.  This\n    is a win if you're just thinking about reducing server load and\n    bandwidth, but I'm not sure if it's helpful for training spam\n    detectors.  Tim?\n\nHappy harvesting --\n\n        Greg\n-- \nGreg Ward <gward@python.net>                         http://www.gerg.ca/\nBudget's in the red?  Let's tax religion!\n    -- Dead Kennedys\n"}