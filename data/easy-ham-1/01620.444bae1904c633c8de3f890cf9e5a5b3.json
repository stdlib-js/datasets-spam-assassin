{"id":"01620","group":"easy-ham-1","checksum":{"type":"MD5","value":"444bae1904c633c8de3f890cf9e5a5b3"},"text":"From GlennEverhart@firstusa.com  Thu Sep  5 11:26:32 2002\nReturn-Path: <GlennEverhart@firstusa.com>\nDelivered-To: yyyy@localhost.spamassassin.taint.org\nReceived: from localhost (jalapeno [127.0.0.1])\n\tby jmason.org (Postfix) with ESMTP id 3BC3316F1F\n\tfor <jm@localhost>; Thu,  5 Sep 2002 11:26:27 +0100 (IST)\nReceived: from jalapeno [127.0.0.1]\n\tby localhost with IMAP (fetchmail-5.9.0)\n\tfor jm@localhost (single-drop); Thu, 05 Sep 2002 11:26:27 +0100 (IST)\nReceived: from outgoing.securityfocus.com (outgoing3.securityfocus.com\n    [66.38.151.27]) by dogma.slashnull.org (8.11.6/8.11.6) with ESMTP id\n    g84K5EZ17306 for <jm@jmason.org>; Wed, 4 Sep 2002 21:05:14 +0100\nReceived: from lists.securityfocus.com (lists.securityfocus.com\n    [66.38.151.19]) by outgoing.securityfocus.com (Postfix) with QMQP id\n    F07E1A30F7; Wed,  4 Sep 2002 13:58:15 -0600 (MDT)\nMailing-List: contact secprog-help@securityfocus.com; run by ezmlm\nPrecedence: bulk\nList-Id: <secprog.list-id.securityfocus.com>\nList-Post: <mailto:secprog@securityfocus.com>\nList-Help: <mailto:secprog-help@securityfocus.com>\nList-Unsubscribe: <mailto:secprog-unsubscribe@securityfocus.com>\nList-Subscribe: <mailto:secprog-subscribe@securityfocus.com>\nDelivered-To: mailing list secprog@securityfocus.com\nDelivered-To: moderator for secprog@securityfocus.com\nReceived: (qmail 11927 invoked from network); 4 Sep 2002 18:56:23 -0000\nMessage-Id: <EA7C77F97CC73F4AAC856A4595DF34E21265EE@swilnts801.wil.fusa.com>\nFrom: \"Everhart, Glenn (FUSA)\" <GlennEverhart@firstusa.com>\nTo: \"'bmord@icon-nicholson.com'\" <bmord@icon-nicholson.com>,\n\t\"Webappsec Securityfocus.Com\" <webappsec@securityfocus.com>,\n\tSECPROG Securityfocus <SECPROG@securityfocus.com>\nSubject: RE: use of base image / delta image for automated recovery from a\n    ttacks\nDate: Wed, 4 Sep 2002 15:11:55 -0400\nMIME-Version: 1.0\nX-Mailer: Internet Mail Service (5.5.2656.59)\nContent-Type: text/plain; charset=\"iso-8859-1\"\n\nI did something crudely along those lines for VMS VAX maybe 13 years\nago; there is at least one product that does it for PC though I don't\nrecall its name. It is also handy for cases where you have a CD image\nof some filesystem (or some other image of a filesystem) that is\nintrinsically readonly but whose filesystem will not accept (or is\nnot graceful) readonly storage. It is also more or less necessary\nif you want to work with WORM file structures, which are older still.\nThere have been a number of filesystems for those dating back to the\nearly 1980s if not before.\n\nA generic facility of the type you mention is also one way to implement\nsnapshots on top of an existing filesystem. The written information\nmust (obviously!) be seekable so you can provide the illusion that you\nwrote to the storage. A device level implementation is however perfectly\nadequate.\n\nIt does not, of course, distinguish for you what should have been changed\nand what should not. If you truly know a device (or perhaps a partition)\nmust not be written, it can be simpler to either return error on writes,\nor to just return a fake success on writes yet discard the data. (NTFS\nlives with the latter strategy just fine from my experiments. I have not\ntried it on extf3 or reiser.) \n\nBTW, think about your mention of RAID and consider the complexity of\nwriting to RAID4 or RAID5...\nI would contend that with cheaper storage these days, it makes little sense\nto use RAID, save for shadowing and possibly striping. Those at least do\nnot have the complexity and slowup dangers that higher RAID levels have, and\nthere is not a need to save the cost of disk so much where a single disk\nmay hold 200 gigs and up. Why not dedicate another whole disk to fault\nrecovery\nand lose the complexity and slow write (sometimes) of RAID?\n\nGlenn Everhart\n\n\n-----Original Message-----\nFrom: bmord@icon-nicholson.com [mailto:bmord@icon-nicholson.com]\nSent: Tuesday, September 03, 2002 3:04 PM\nTo: Webappsec Securityfocus.Com; SECPROG Securityfocus\nSubject: use of base image / delta image for automated recovery from\nattacks\n\n\nHi,\n\nI was inspired by a mode of operation supported by VMWare. You can have a\nbase disk image shared by multiple virtual machine (vm) instances. That base\nimage is never altered by a vm instance. Instead, each vm instance writes\nchanges to its own \"redo\" log. Future hard disk reads from that vm instance\nincorporate both the base image and the appropriate redo log to present the\ncurrent disk image for that specific virtual machine.\n\nThis is described here (thanks to Duane for providing this link on the\nhoneypots mailing list)\nhttp://www.vmware.com/support/reference/common/disk_sharing.html\n\nCould this basic concept be used to easily make self-fixing client/server\napplications that efficiently and automatically recover from most attacks,\neven before those attacks have been discovered? Here is what I imagine.\n\nThe physical architectures of most production client/server systems are\nlayered. For example, your basic web application might have a web server\nrunning Apache, connected to an application server running some J2EE or .Net\nbusiness logic, connected to a database server for persistence. The only one\nof these whose disk image really should evolve over time is the database\nserver, and even here you often put the static RDBMS software on one\npartition and the changeable datafiles on another partition. It is only the\npartition with the volatile datafiles that must be allowed to change from\none boot to the next. Other paritions may need to be writable for, say, swap\nspace, but these changes could be eliminated on each reboot.\n\nWhen someone cracks this system, they will probably change an image that\nshouldn't be changed. E.g., they might leverage a buffer overflow in IIS or\nApache to install a trojan or a backdoor on the more exposed web server. But\nwhat if the web server ran off a base image, writing changes to a \"delta\" or\n\"redo\" partition? And then what if every night it automatically erased the\nredo partition and rebooted? The downtime involved for each machine would be\nminimal, because it is only deleting data - rather than restoring from\nbackup. In a system with redundant web servers for load balancing or high\navailability, this could be scheduled in a way such that the system is\nalways accessible. This base/redo partition concept could be implemented at\nthe same level as a feature of hardware RAID, allowing for greater\nperformance, reliability, and hack resistance. This concept could also be\napplied to the application servers, and even the database server partitions\n(except for those partitions which contain the table data files, of course.)\n\nDoes anyone do this already? Or is this a new concept? Or has this concept\nbeen discussed before and abandoned for some reasons that I don't yet know?\nI use the physical architecture of a basic web application as an example in\nthis post, but this concept could of course be applied to most server\nsystems. It would allow for the hardware-separation of volatile and\nnon-volatile disk images. It would be analogous to performing nightly\nghosting operations, only it would be more efficient and involve less (or\nno) downtime.\n\nThanks for any opinions,\nBen\n\n\n**********************************************************************\nThis transmission may contain information that is privileged, confidential and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format. Thank you\n**********************************************************************\n\n\n"}