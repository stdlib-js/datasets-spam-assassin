{"id":"01654","group":"easy-ham-1","checksum":{"type":"MD5","value":"ade7f371dd3f7c4393baf201b803755a"},"text":"Return-Path: barry@python.org\nDelivery-Date: Fri Sep  6 17:23:33 2002\nFrom: barry@python.org (Barry A. Warsaw)\nDate: Fri, 6 Sep 2002 12:23:33 -0400\nSubject: [Spambayes] Deployment\nReferences: <3D788653.9143.1D8992DA@localhost>\n\t<200209061443.g86Ehie14557@pcp02138704pcs.reston01.va.comcast.net>\n\t<20020906155705.GA22115@glacier.arctrix.com>\nMessage-ID: <15736.54917.688066.738120@anthem.wooz.org>\n\n\n>>>>> \"NS\" == Neil Schemenauer <nas@python.ca> writes:\n\n    NS> Writing an IMAP server is a non-trivial task.\n\nThat's what I've been told by everyone I've talked to who's actually\ntried to write one.\n    \n    NS> Alternatively, perhaps there could be a separate protocol and\n    NS> client that could be used to review additions to the training\n    NS> set.  Each day a few random spam and ham messages could be\n    NS> grabbed as candidates.  Someone would periodically startup the\n    NS> client, review the candidates, reclassify or remove any\n    NS> messages they don't like and add them to the training set.\n\nI think people will be much more motivated to report spam than ham.  I\nlike the general approach that copies of random messages will be\nsequestered for some period of time before they're assumed to be ham.\nMatched with a simple spam reporting scheme, this could keep the\ntraining up to date with little effort.  I've sketched out an approach\na listserver like Mailman could do along these lines and if I get some\nfree time I'll hack something together.\n\nI like the idea of a POP proxy which is classifying messages as\nthey're pulled from the server.  The easiest way for such a beast to\nbe notified of spam might be to simply save the spam in a special\nfolder or file that the POP proxy would periodically consult.\n\n-Barry\n"}