{"id":"02479","group":"easy-ham-1","checksum":{"type":"MD5","value":"14365bcad3a60fcf24c5c1813f6291fb"},"text":"From secprog-return-625-jm=jmason.org@securityfocus.com  Tue Nov 26 11:27:38 2002\nReturn-Path: <secprog-return-625-yyyy=spamassassin.taint.org@securityfocus.com>\nDelivered-To: yyyy@localhost.spamassassin.taint.org\nReceived: from localhost (jalapeno [127.0.0.1])\n\tby jmason.org (Postfix) with ESMTP id 914B516F1A\n\tfor <jm@localhost>; Tue, 26 Nov 2002 11:27:31 +0000 (GMT)\nReceived: from jalapeno [127.0.0.1]\n\tby localhost with IMAP (fetchmail-5.9.0)\n\tfor jm@localhost (single-drop); Tue, 26 Nov 2002 11:27:31 +0000 (GMT)\nReceived: from outgoing.securityfocus.com (outgoing2.securityfocus.com\n    [205.206.231.26]) by dogma.slashnull.org (8.11.6/8.11.6) with ESMTP id\n    gAQ4ZYW13887 for <jm@jmason.org>; Tue, 26 Nov 2002 04:35:35 GMT\nReceived: from lists.securityfocus.com (lists.securityfocus.com\n    [205.206.231.19]) by outgoing.securityfocus.com (Postfix) with QMQP id\n    302578F2F5; Mon, 25 Nov 2002 12:32:48 -0700 (MST)\nMailing-List: contact secprog-help@securityfocus.com; run by ezmlm\nPrecedence: bulk\nList-Id: <secprog.list-id.securityfocus.com>\nList-Post: <mailto:secprog@securityfocus.com>\nList-Help: <mailto:secprog-help@securityfocus.com>\nList-Unsubscribe: <mailto:secprog-unsubscribe@securityfocus.com>\nList-Subscribe: <mailto:secprog-subscribe@securityfocus.com>\nDelivered-To: mailing list secprog@securityfocus.com\nDelivered-To: moderator for secprog@securityfocus.com\nReceived: (qmail 2319 invoked from network); 25 Nov 2002 20:11:46 -0000\nDate: Mon, 25 Nov 2002 20:25:26 +0000\nFrom: Luciano Miguel Ferreira Rocha <strange@nsk.no-ip.org>\nTo: Ali Saifullah Khan <whipaz@gem.net.pk>\nCc: cdavison@nucleus.com, secprog@securityfocus.com\nSubject: Re: Are bad developer libraries the problem with M$ software?\nMessage-Id: <20021125202526.GA9488@nsk.no-ip.org>\nReply-To: strange@nsk.no-ip.org\nMail-Followup-To: Luciano Miguel Ferreira Rocha <strange@nsk.no-ip.org>,\n\tAli Saifullah Khan <whipaz@gem.net.pk>, cdavison@nucleus.com,\n\tsecprog@securityfocus.com\nReferences: <0765fe847442469cb74c250e51a8d37e.cdavison@nucleus.com>\n    <000801c2924c$7e1e9b20$ab8405ca@opendev>\nMIME-Version: 1.0\nContent-Type: text/plain; charset=us-ascii\nContent-Disposition: inline\nIn-Reply-To: <000801c2924c$7e1e9b20$ab8405ca@opendev>\nUser-Agent: Mutt/1.4i\nX-Disclaimer: 'Author of this message is not responsible for any harm done\n    to reader's computer.'\nX-Organization: 'NSK'\nX-Section: 'Admin'\nX-Priority: '1 (Highest)'\n\n\nI don't know how one can expect better and more secure code from the\ncommunity when this being a security list some post like this shows\nclearly no knowledge of C.\n\nOn Fri, Nov 22, 2002 at 10:27:53PM +0500, Ali Saifullah Khan wrote:\n> Here is a test done on the return of sizes by sizeof() using pointers.\n> \n> #include <iostream.h>\n> \n> int main(void) {\n>  char *testbuff[1024];\n   ^^^^^^^^^^^^^^^^^^^^\n\nRead it like this: new array with 1024 elements of type pointer to char.\nAs a pointer occupies the natural word size (32 bits or 64bits), no wonder\nyou get 4*1024 (sizeof(char *) * numer_of_elements).\n\n>  int len = sizeof(testbuff);\n>  cout << len << \"\\n\";\n>  return 0;\n> }\n\n> using \" int len = sizeof((char*)testbuff); \"\nsizeof returns the size of types. You can use it with vars (and then the\nnormal form is sizeof var, not sizeof(var)), but if you're changing the\ntype with the var with a cast, of course you'll get the size of that new\ntype.\n\nRegards,\nLuciano Rocha\n\n-- \nConsciousness: that annoying time between naps.\n\n\n"}