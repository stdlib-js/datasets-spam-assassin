{"id":"01934","group":"easy-ham-1","checksum":{"type":"MD5","value":"c78fac21c6a9fdd42667a2e35f8a4692"},"text":"From rssfeeds@jmason.org  Thu Sep 26 16:34:02 2002\nReturn-Path: <rssfeeds@spamassassin.taint.org>\nDelivered-To: yyyy@localhost.spamassassin.taint.org\nReceived: from localhost (jalapeno [127.0.0.1])\n\tby jmason.org (Postfix) with ESMTP id 6664D16F18\n\tfor <jm@localhost>; Thu, 26 Sep 2002 16:34:00 +0100 (IST)\nReceived: from jalapeno [127.0.0.1]\n\tby localhost with IMAP (fetchmail-5.9.0)\n\tfor jm@localhost (single-drop); Thu, 26 Sep 2002 16:34:00 +0100 (IST)\nReceived: from dogma.slashnull.org (localhost [127.0.0.1]) by\n    dogma.slashnull.org (8.11.6/8.11.6) with ESMTP id g8QFSTg24435 for\n    <jm@jmason.org>; Thu, 26 Sep 2002 16:28:29 +0100\nMessage-Id: <200209261528.g8QFSTg24435@dogma.slashnull.org>\nTo: yyyy@spamassassin.taint.org\nFrom: joelonsoftware <rssfeeds@spamassassin.taint.org>\nSubject: We're trying to decide if FogBUGZ 3.0 should support custom\n    fields. Histor\nDate: Thu, 26 Sep 2002 15:28:28 -0000\nContent-Type: text/plain; encoding=utf-8\n\nURL: http://www.joelonsoftware.com/news/20020912.html\nDate: Not supplied\n\nWe're trying to decide if FogBUGZ[1] 3.0 should support custom fields. \nHistorically, I am opposed to custom fields in principle, because they get \nabused. People add so many fields to their bug databases to capture everything \nthey think might be important that entering a bug is like applying to Harvard. \nEnd result: people don't enter bugs, which is much, much worse than not \ncapturing all that information. You can always \"page fault\" to get the \ninformation if the original report forgot it. Rather than having a field in \nevery bug where you enter the version numbers of every DLL on your machine \n(this is an actual customer request), information which is likely to be \nrelevant only for a tiny percentage of bugs, why not just have the \nprogrammer-assignee look at the bug first, and if they think it might be \ndll-version-related, only _then_ bounce the bug back to the originator asking \nfor the DLL info? Similarly, it's always tempting to add a field in which you \nask for the OS version in which the bug occurred. This sounds logical, but \ntrust me: adding fields like this is guaranteed to do one thing and one thing \nonly: reduce the number of bug reports that get into the system in the first \nplace. Only a small percentage of bugs are really OS dependant and you can \nalways include that info in the text description of the bug if it happens to be \nrelevant. (But then how do you search for, say, all bugs which only happen on \nWindows 98SE? Aha! You can't. Ever. Even with the custom field. Because not \nevery bug has been regressed on every version of every operating system, so \nthis search doesn't make sense in the first place. The info wasn't captured. Do \na full text search for 98SE and you'll find some of them. Life is imperfect.) \n\nLife would be more perfect if every bug report included megabytes of \ninformation -- a complete dump of every byte on the hard drive and in RAM on \nthe computer in question and while you're at it, a photograph of the tester's \nworkspace. But the goal of a bug tracking database is to _keep track of bugs_, \nwhich, all else being equal, takes priority over making it easy to find them. I \nhave heard countless stories of development teams where the bug tracking \npackage was so high-ceremony that people were afraid to enter bugs in the \nsystem, because they didn't know what all those fields were. The _real_ \nbug-\"tracking\" happened in email, post-its, and hallway conversations. Great. \n\nA pretty common question we get on the customer service line is, \"does \nFogBUGZ support custom fields?\" Rather than giving our usual answer (\"no. on \npurpose.\") over the last few weeks I've been saying, \"can you please tell me \nwhat fields you would need? We're trying to decide whether to implement that \nfeature in 3.0 and we want to know why people need it.\" The interesting thing \nis, almost all of the fields people ask for _are already in FogBUGZ,_ and the \nother ones, in my educated opinion, shouldn't be fields. And in fact, our \nexisting customers are certainly happy without custom fields. One of our \nbiggest site licenses was sold to a semiconductor company, and I myself wanted \nto add a custom field for them to keep track of versions of the circuit design, \nbut I didn't, and they never needed it (even though they had been keeping track \nof it with the old bug tracking package which had custom fields), and they are \nhappy and keep buying more site licenses. \n\nBut the dilemma for us is that many customers are evaluating bug tracking \nsoftware and they consider the lack of custom fields to be a major weakness in \nour product. \"Gosh, even Filemaker has custom fields.\" Righto. It's true. And \nwho am I to tell my customers they are wrong? One person who I was talking to \nyesterday would have used a custom field for something that we already have a \nbuilt-in field for. This would have made their database confusing and \ninconsistent and would have definitely caused more problems than it solved. But \nit's still rude of me to tell customers that we don't have that feature _for \ntheir own good_, even though it usually is, and we're losing some sales because \nof it. \n\nSigh. I guess we could have a custom fields feature but hide it and make it so \nhard to use that people don't use it. At least we won't lose any sales :)\n\n[1] http://www.fogcreek.com/FogBUGZ\n\n\n"}