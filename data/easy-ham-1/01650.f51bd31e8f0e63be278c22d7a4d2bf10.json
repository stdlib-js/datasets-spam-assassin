{"id":"01650","group":"easy-ham-1","checksum":{"type":"MD5","value":"f51bd31e8f0e63be278c22d7a4d2bf10"},"text":"Return-Path: guido@python.org\nDelivery-Date: Fri Sep  6 16:06:26 2002\nFrom: guido@python.org (Guido van Rossum)\nDate: Fri, 06 Sep 2002 11:06:26 -0400\nSubject: [Spambayes] Deployment\nIn-Reply-To: Your message of \"Fri, 06 Sep 2002 10:01:51 CDT.\"\n             <15736.50015.881231.510395@12-248-11-90.client.attbi.com> \nReferences: <200209061431.g86EVM114413@pcp02138704pcs.reston01.va.comcast.net>\n\t<15736.50015.881231.510395@12-248-11-90.client.attbi.com> \nMessage-ID: <200209061506.g86F6Qo14777@pcp02138704pcs.reston01.va.comcast.net>\n\n> Dunno about the other tools, but SpamAssassin is a breeze to incorporate\n> into a procmail environment.  Lots of people use it in many other ways.  For\n> performance reasons, many people run a spamd process and then invoke a small\n> C program called spamc which shoots the message over to spamd and passes the\n> result back out.  I think spambayes in incremental mode is probably fast\n> enough to not require such tricks (though I would consider changing the\n> pickle to an anydbm file).\n> \n> Basic procmail usage goes something like this:\n> \n>     :0fw\n>     | spamassassin -P\n> \n>     :0\n>     * ^X-Spam-Status: Yes\n>     $SPAM\n> \n> Which just says, \"Run spamassassin -P reinjecting its output into the\n> processing stream.  If the resulting mail has a header which begins\n> \"X-Spam-Status: Yes\", toss it into the folder indicated by the variable\n> $SPAM.\n> \n> SpamAssassin also adds other headers as well, which give you more detail\n> about how its tests fared.  I'd like to see spambayes operate in at least\n> this way: do its thing then return a message to stdout with a modified set\n> of headers which further processing downstream can key on.\n\nDo you feel capable of writing such a tool?  It doesn't look too hard.\n\n--Guido van Rossum (home page: http://www.python.org/~guido/)\n"}