{"id":"01618","group":"easy-ham-1","checksum":{"type":"MD5","value":"c12a22faa8de12e5dacd4d988a0b50a7"},"text":"From bmord@icon-nicholson.com  Wed Sep  4 19:11:17 2002\nReturn-Path: <bmord@icon-nicholson.com>\nDelivered-To: yyyy@localhost.spamassassin.taint.org\nReceived: from localhost (jalapeno [127.0.0.1])\n\tby jmason.org (Postfix) with ESMTP id 01DEB16F1E\n\tfor <jm@localhost>; Wed,  4 Sep 2002 19:11:16 +0100 (IST)\nReceived: from jalapeno [127.0.0.1]\n\tby localhost with IMAP (fetchmail-5.9.0)\n\tfor jm@localhost (single-drop); Wed, 04 Sep 2002 19:11:16 +0100 (IST)\nReceived: from outgoing.securityfocus.com (outgoing2.securityfocus.com\n    [66.38.151.26]) by dogma.slashnull.org (8.11.6/8.11.6) with ESMTP id\n    g84HwJZ13376 for <jm@jmason.org>; Wed, 4 Sep 2002 18:58:20 +0100\nReceived: from lists.securityfocus.com (lists.securityfocus.com\n    [66.38.151.19]) by outgoing.securityfocus.com (Postfix) with QMQP id\n    D587D8F324; Wed,  4 Sep 2002 10:58:23 -0600 (MDT)\nMailing-List: contact secprog-help@securityfocus.com; run by ezmlm\nPrecedence: bulk\nList-Id: <secprog.list-id.securityfocus.com>\nList-Post: <mailto:secprog@securityfocus.com>\nList-Help: <mailto:secprog-help@securityfocus.com>\nList-Unsubscribe: <mailto:secprog-unsubscribe@securityfocus.com>\nList-Subscribe: <mailto:secprog-subscribe@securityfocus.com>\nDelivered-To: mailing list secprog@securityfocus.com\nDelivered-To: moderator for secprog@securityfocus.com\nReceived: (qmail 11689 invoked from network); 3 Sep 2002 18:49:02 -0000\nFrom: bmord@icon-nicholson.com (Ben Mord)\nTo: \"Webappsec Securityfocus.Com\" <webappsec@securityfocus.com>,\n\t\"SECPROG Securityfocus\" <SECPROG@securityfocus.com>\nSubject: use of base image / delta image for automated recovery from attacks\nDate: Tue, 3 Sep 2002 15:04:27 -0400\nMessage-Id: <NAEOJLMPJMJDFPLHIOJOAEFJDBAA.bmord@icon-nicholson.com>\nMIME-Version: 1.0\nContent-Type: text/plain; charset=\"iso-8859-1\"\nContent-Transfer-Encoding: 7bit\nX-Priority: 3 (Normal)\nX-Msmail-Priority: Normal\nX-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)\nX-Mimeole: Produced By Microsoft MimeOLE V5.50.4522.1200\nImportance: Normal\n\nHi,\n\nI was inspired by a mode of operation supported by VMWare. You can have a\nbase disk image shared by multiple virtual machine (vm) instances. That base\nimage is never altered by a vm instance. Instead, each vm instance writes\nchanges to its own \"redo\" log. Future hard disk reads from that vm instance\nincorporate both the base image and the appropriate redo log to present the\ncurrent disk image for that specific virtual machine.\n\nThis is described here (thanks to Duane for providing this link on the\nhoneypots mailing list)\nhttp://www.vmware.com/support/reference/common/disk_sharing.html\n\nCould this basic concept be used to easily make self-fixing client/server\napplications that efficiently and automatically recover from most attacks,\neven before those attacks have been discovered? Here is what I imagine.\n\nThe physical architectures of most production client/server systems are\nlayered. For example, your basic web application might have a web server\nrunning Apache, connected to an application server running some J2EE or .Net\nbusiness logic, connected to a database server for persistence. The only one\nof these whose disk image really should evolve over time is the database\nserver, and even here you often put the static RDBMS software on one\npartition and the changeable datafiles on another partition. It is only the\npartition with the volatile datafiles that must be allowed to change from\none boot to the next. Other paritions may need to be writable for, say, swap\nspace, but these changes could be eliminated on each reboot.\n\nWhen someone cracks this system, they will probably change an image that\nshouldn't be changed. E.g., they might leverage a buffer overflow in IIS or\nApache to install a trojan or a backdoor on the more exposed web server. But\nwhat if the web server ran off a base image, writing changes to a \"delta\" or\n\"redo\" partition? And then what if every night it automatically erased the\nredo partition and rebooted? The downtime involved for each machine would be\nminimal, because it is only deleting data - rather than restoring from\nbackup. In a system with redundant web servers for load balancing or high\navailability, this could be scheduled in a way such that the system is\nalways accessible. This base/redo partition concept could be implemented at\nthe same level as a feature of hardware RAID, allowing for greater\nperformance, reliability, and hack resistance. This concept could also be\napplied to the application servers, and even the database server partitions\n(except for those partitions which contain the table data files, of course.)\n\nDoes anyone do this already? Or is this a new concept? Or has this concept\nbeen discussed before and abandoned for some reasons that I don't yet know?\nI use the physical architecture of a basic web application as an example in\nthis post, but this concept could of course be applied to most server\nsystems. It would allow for the hardware-separation of volatile and\nnon-volatile disk images. It would be analogous to performing nightly\nghosting operations, only it would be more efficient and involve less (or\nno) downtime.\n\nThanks for any opinions,\nBen\n\n\n"}